
UDS27_Security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dbc  08003dbc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000210  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000063d5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001657  00000000  00000000  000264b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000678  00000000  00000000  00027b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004b7  00000000  00000000  00028188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f0b6  00000000  00000000  0002863f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007dab  00000000  00000000  000476f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9498  00000000  00000000  0004f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002238  00000000  00000000  00108938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0010ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cac 	.word	0x08003cac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003cac 	.word	0x08003cac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Init_Tester>:
	TxData[1] = 0x67; // service
	TxData[2] = 0x01; //sub-service

}

void Init_Tester(){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0

   TxHeader.DLC = 8;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <Init_Tester+0x64>)
 8000574:	2208      	movs	r2, #8
 8000576:	611a      	str	r2, [r3, #16]
   TxHeader.ExtId = 0x11111111;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <Init_Tester+0x64>)
 800057a:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800057e:	605a      	str	r2, [r3, #4]
   TxHeader.IDE = CAN_ID_EXT;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <Init_Tester+0x64>)
 8000582:	2204      	movs	r2, #4
 8000584:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <Init_Tester+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 46;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <Init_Tester+0x64>)
 800058e:	222e      	movs	r2, #46	; 0x2e
 8000590:	601a      	str	r2, [r3, #0]
   TxHeader.TransmitGlobalTime = DISABLE;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <Init_Tester+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	751a      	strb	r2, [r3, #20]

   TxData[0] = 0x27;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <Init_Tester+0x68>)
 800059a:	2227      	movs	r2, #39	; 0x27
 800059c:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0x01;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <Init_Tester+0x68>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	705a      	strb	r2, [r3, #1]
   for(int i =2 ; i<8;i++)
 80005a4:	2302      	movs	r3, #2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	e007      	b.n	80005ba <Init_Tester+0x4e>
   {
	   TxData[i] = 0x55;
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <Init_Tester+0x68>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	2255      	movs	r2, #85	; 0x55
 80005b2:	701a      	strb	r2, [r3, #0]
   for(int i =2 ; i<8;i++)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b07      	cmp	r3, #7
 80005be:	ddf4      	ble.n	80005aa <Init_Tester+0x3e>
   }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	20000110 	.word	0x20000110

080005d8 <Init_ECU>:


void Init_ECU(){
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

   TxHeader.DLC = 8;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <Init_ECU+0x48>)
 80005de:	2208      	movs	r2, #8
 80005e0:	611a      	str	r2, [r3, #16]
   TxHeader.ExtId = 0x11111111;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <Init_ECU+0x48>)
 80005e4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80005e8:	605a      	str	r2, [r3, #4]
   TxHeader.IDE = CAN_ID_EXT;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <Init_ECU+0x48>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <Init_ECU+0x48>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 0x104;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <Init_ECU+0x48>)
 80005f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005fc:	601a      	str	r2, [r3, #0]
   TxHeader.TransmitGlobalTime = DISABLE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <Init_ECU+0x48>)
 8000600:	2200      	movs	r2, #0
 8000602:	751a      	strb	r2, [r3, #20]

   TxData[0] = 0x06;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <Init_ECU+0x4c>)
 8000606:	2206      	movs	r2, #6
 8000608:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0x67;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <Init_ECU+0x4c>)
 800060c:	2267      	movs	r2, #103	; 0x67
 800060e:	705a      	strb	r2, [r3, #1]
   TxData[2] = 0x01;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <Init_ECU+0x4c>)
 8000612:	2201      	movs	r2, #1
 8000614:	709a      	strb	r2, [r3, #2]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	200000d8 	.word	0x200000d8
 8000624:	20000110 	.word	0x20000110

08000628 <Compare_key>:

void Compare_key()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	for(int i = 3 ; i< 7 ;i++){
 800062e:	2303      	movs	r3, #3
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e00f      	b.n	8000654 <Compare_key+0x2c>
		if(RxData[i] != Key[i -3]){
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <Compare_key+0x8c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b03      	subs	r3, #3
 8000640:	491d      	ldr	r1, [pc, #116]	; (80006b8 <Compare_key+0x90>)
 8000642:	5ccb      	ldrb	r3, [r1, r3]
 8000644:	429a      	cmp	r2, r3
 8000646:	d002      	beq.n	800064e <Compare_key+0x26>
			isBlock = 2;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Compare_key+0x94>)
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
	for(int i = 3 ; i< 7 ;i++){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b06      	cmp	r3, #6
 8000658:	ddec      	ble.n	8000634 <Compare_key+0xc>
		}
	}
	if(isBlock != 2){
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <Compare_key+0x94>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d024      	beq.n	80006ac <Compare_key+0x84>
		isBlock = 0;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <Compare_key+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
		TxData[0] = 0x02;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <Compare_key+0x98>)
 800066a:	2202      	movs	r2, #2
 800066c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x67;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Compare_key+0x98>)
 8000670:	2267      	movs	r2, #103	; 0x67
 8000672:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x02;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Compare_key+0x98>)
 8000676:	2202      	movs	r2, #2
 8000678:	709a      	strb	r2, [r3, #2]
		for(int i= 3 ; i < 8 ;i++){
 800067a:	2303      	movs	r3, #3
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	e007      	b.n	8000690 <Compare_key+0x68>
			TxData[i] = 0x55;
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <Compare_key+0x98>)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4413      	add	r3, r2
 8000686:	2255      	movs	r2, #85	; 0x55
 8000688:	701a      	strb	r2, [r3, #0]
		for(int i= 3 ; i < 8 ;i++){
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b07      	cmp	r3, #7
 8000694:	ddf4      	ble.n	8000680 <Compare_key+0x58>
		}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2101      	movs	r1, #1
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <Compare_key+0x9c>)
 800069c:	f001 fe8a 	bl	80023b4 <HAL_GPIO_WritePin>
		HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <Compare_key+0xa0>)
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <Compare_key+0x98>)
 80006a4:	4909      	ldr	r1, [pc, #36]	; (80006cc <Compare_key+0xa4>)
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <Compare_key+0xa8>)
 80006a8:	f000 ff94 	bl	80015d4 <HAL_CAN_AddTxMessage>
	}
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000118 	.word	0x20000118
 80006b8:	20000120 	.word	0x20000120
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000110 	.word	0x20000110
 80006c4:	40020400 	.word	0x40020400
 80006c8:	2000010c 	.word	0x2000010c
 80006cc:	200000d8 	.word	0x200000d8
 80006d0:	200000b0 	.word	0x200000b0

080006d4 <Calculator_Key>:

void Calculator_Key()
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
	for(int i= 3 ; i < 7 ;i++){
 80006da:	2303      	movs	r3, #3
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	e00d      	b.n	80006fc <Calculator_Key+0x28>
		TxData[i] = RxData[i] + 1;
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <Calculator_Key+0x3c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <Calculator_Key+0x40>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	460a      	mov	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
	for(int i= 3 ; i < 7 ;i++){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b06      	cmp	r3, #6
 8000700:	ddee      	ble.n	80006e0 <Calculator_Key+0xc>

	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000118 	.word	0x20000118
 8000714:	20000110 	.word	0x20000110

08000718 <Generate_Seed>:

void Generate_Seed() //Create seed
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	for(int i = 3 ;i < 7; i++){
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	e021      	b.n	8000768 <Generate_Seed+0x50>
		TxData[i] = rand()% 0xff;
 8000724:	f002 fadc 	bl	8002ce0 <rand>
 8000728:	4602      	mov	r2, r0
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <Generate_Seed+0x64>)
 800072c:	fb83 1302 	smull	r1, r3, r3, r2
 8000730:	4413      	add	r3, r2
 8000732:	11d9      	asrs	r1, r3, #7
 8000734:	17d3      	asrs	r3, r2, #31
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	1ad1      	subs	r1, r2, r3
 8000740:	b2c9      	uxtb	r1, r1
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <Generate_Seed+0x68>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	701a      	strb	r2, [r3, #0]
		Key[i] = TxData[i] + 1;
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <Generate_Seed+0x68>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	b2d9      	uxtb	r1, r3
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <Generate_Seed+0x6c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	460a      	mov	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
	for(int i = 3 ;i < 7; i++){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b06      	cmp	r3, #6
 800076c:	ddda      	ble.n	8000724 <Generate_Seed+0xc>
	}
	TxData[7] = 0x55;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <Generate_Seed+0x68>)
 8000770:	2255      	movs	r2, #85	; 0x55
 8000772:	71da      	strb	r2, [r3, #7]
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	80808081 	.word	0x80808081
 8000780:	20000110 	.word	0x20000110
 8000784:	20000120 	.word	0x20000120

08000788 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000798:	d114      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <HAL_GPIO_EXTI_Callback+0x44>)
 80007a0:	f001 fe08 	bl	80023b4 <HAL_GPIO_WritePin>

		Init_Tester();
 80007a4:	f7ff fee2 	bl	800056c <Init_Tester>
		// Send request seed to ECU
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007ac:	490a      	ldr	r1, [pc, #40]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <HAL_GPIO_EXTI_Callback+0x54>)
 80007b0:	f000 ff10 	bl	80015d4 <HAL_CAN_AddTxMessage>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <HAL_GPIO_EXTI_Callback+0x44>)
 80007c0:	f001 fdf8 	bl	80023b4 <HAL_GPIO_WritePin>
		}
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020400 	.word	0x40020400
 80007d0:	2000010c 	.word	0x2000010c
 80007d4:	20000110 	.word	0x20000110
 80007d8:	200000d8 	.word	0x200000d8
 80007dc:	20000088 	.word	0x20000088

080007e0 <Processing_ECU>:


void Processing_ECU()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	Init_ECU();
 80007e4:	f7ff fef8 	bl	80005d8 <Init_ECU>
	//Check request service
	if(RxData[0] == 0x27){
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <Processing_ECU+0x38>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b27      	cmp	r3, #39	; 0x27
 80007ee:	d111      	bne.n	8000814 <Processing_ECU+0x34>
		//check seed request
		if(RxData[1] == 0x01){
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <Processing_ECU+0x38>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d107      	bne.n	8000808 <Processing_ECU+0x28>
			//Create seed
			Generate_Seed();
 80007f8:	f7ff ff8e 	bl	8000718 <Generate_Seed>
			//send Seed to Tester
			HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <Processing_ECU+0x3c>)
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <Processing_ECU+0x40>)
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <Processing_ECU+0x44>)
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <Processing_ECU+0x48>)
 8000804:	f000 fee6 	bl	80015d4 <HAL_CAN_AddTxMessage>
		}
		//check key request
		if(RxData[1] == 0x02){
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <Processing_ECU+0x38>)
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d101      	bne.n	8000814 <Processing_ECU+0x34>
			Compare_key();
 8000810:	f7ff ff0a 	bl	8000628 <Compare_key>
		}
	}

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000118 	.word	0x20000118
 800081c:	2000010c 	.word	0x2000010c
 8000820:	20000110 	.word	0x20000110
 8000824:	200000d8 	.word	0x200000d8
 8000828:	200000b0 	.word	0x200000b0

0800082c <Processing_Tester>:


void Processing_Tester()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	Init_Tester();
 8000830:	f7ff fe9c 	bl	800056c <Init_Tester>
	//check responsive
	if(RxData[1] == 0x67)
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <Processing_Tester+0x34>)
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	2b67      	cmp	r3, #103	; 0x67
 800083a:	d10e      	bne.n	800085a <Processing_Tester+0x2e>
	{
		//response seed
		if(RxData[2] == 0x01){
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <Processing_Tester+0x34>)
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10a      	bne.n	800085a <Processing_Tester+0x2e>
			//chance service
			TxData[2] = 0x02;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <Processing_Tester+0x38>)
 8000846:	2202      	movs	r2, #2
 8000848:	709a      	strb	r2, [r3, #2]
			Calculator_Key();
 800084a:	f7ff ff43 	bl	80006d4 <Calculator_Key>
			//send key request to ECU
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <Processing_Tester+0x3c>)
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <Processing_Tester+0x38>)
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <Processing_Tester+0x40>)
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <Processing_Tester+0x44>)
 8000856:	f000 febd 	bl	80015d4 <HAL_CAN_AddTxMessage>
		}
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000118 	.word	0x20000118
 8000864:	20000110 	.word	0x20000110
 8000868:	2000010c 	.word	0x2000010c
 800086c:	200000d8 	.word	0x200000d8
 8000870:	20000088 	.word	0x20000088

08000874 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	//check receive
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2104      	movs	r1, #4
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000882:	f001 fd97 	bl	80023b4 <HAL_GPIO_WritePin>
	//ECU get Message
	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0 , &RxHeader, RxData) == HAL_OK){
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800088a:	2100      	movs	r1, #0
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800088e:	f000 ff7c 	bl	800178a <HAL_CAN_GetRxMessage>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800089e:	f001 fd89 	bl	80023b4 <HAL_GPIO_WritePin>
			Processing_ECU();
 80008a2:	f7ff ff9d 	bl	80007e0 <Processing_ECU>
		};
	//Tester get Message
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &RxHeader, RxData) == HAL_OK){
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80008ae:	f000 ff6c 	bl	800178a <HAL_CAN_GetRxMessage>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d106      	bne.n	80008c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80008be:	f001 fd79 	bl	80023b4 <HAL_GPIO_WritePin>
			Processing_Tester();
 80008c2:	f7ff ffb3 	bl	800082c <Processing_Tester>
		};

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20000118 	.word	0x20000118
 80008d8:	200000f0 	.word	0x200000f0
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	20000088 	.word	0x20000088

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fbe2 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f828 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f936 	bl	8000b60 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008f4:	f000 f88c 	bl	8000a10 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008f8:	f000 f8de 	bl	8000ab8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <main+0x50>)
 80008fe:	f000 fe25 	bl	800154c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <main+0x54>)
 8000904:	f000 fe22 	bl	800154c <HAL_CAN_Start>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000908:	2102      	movs	r1, #2
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <main+0x50>)
 800090c:	f001 f84f 	bl	80019ae <HAL_CAN_ActivateNotification>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d009      	beq.n	800092a <main+0x46>
   {
   /* Notification Error */
 	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2101      	movs	r1, #1
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <main+0x58>)
 800091c:	f001 fd4a 	bl	80023b4 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	2102      	movs	r1, #2
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <main+0x58>)
 8000926:	f001 fd45 	bl	80023b4 <HAL_GPIO_WritePin>
   }

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800092a:	2102      	movs	r1, #2
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <main+0x54>)
 800092e:	f001 f83e 	bl	80019ae <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000932:	e7fe      	b.n	8000932 <main+0x4e>
 8000934:	20000088 	.word	0x20000088
 8000938:	200000b0 	.word	0x200000b0
 800093c:	40020400 	.word	0x40020400

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fb09 	bl	8002f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <SystemClock_Config+0xc8>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <SystemClock_Config+0xc8>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <SystemClock_Config+0xc8>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <SystemClock_Config+0xcc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <SystemClock_Config+0xcc>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <SystemClock_Config+0xcc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009b4:	2350      	movs	r3, #80	; 0x50
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fd27 	bl	8002418 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009d0:	f000 f948 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2302      	movs	r3, #2
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2102      	movs	r1, #2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 ff89 	bl	8002908 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009fc:	f000 f932 	bl	8000c64 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a18:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <MX_CAN1_Init+0xa4>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a1e:	220a      	movs	r2, #10
 8000a20:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000a66:	f000 fb95 	bl	8001194 <HAL_CAN_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000a70:	f000 f8f8 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    CAN_FilterTypeDef canfilterconfig;
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 14;
 8000a98:	230e      	movs	r3, #14
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_CAN1_Init+0xa0>)
 8000aa2:	f000 fc73 	bl	800138c <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000088 	.word	0x20000088
 8000ab4:	40006400 	.word	0x40006400

08000ab8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <MX_CAN2_Init+0xa4>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ad6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000ada:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ade:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000b0e:	f000 fb41 	bl	8001194 <HAL_CAN_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000b18:	f000 f8a4 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig1;
  canfilterconfig1.FilterActivation = CAN_FILTER_ENABLE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  canfilterconfig1.FilterBank = 14;
 8000b20:	230e      	movs	r3, #14
 8000b22:	617b      	str	r3, [r7, #20]
  canfilterconfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  canfilterconfig1.FilterIdHigh = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  canfilterconfig1.FilterIdLow = 0x0000;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  canfilterconfig1.FilterMaskIdHigh = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  canfilterconfig1.FilterMaskIdLow = 0x0000;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  canfilterconfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  canfilterconfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  canfilterconfig1.SlaveStartFilterBank = 14;
 8000b40:	230e      	movs	r3, #14
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig1);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_CAN2_Init+0xa0>)
 8000b4a:	f000 fc1f 	bl	800138c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	40006800 	.word	0x40006800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_GPIO_Init+0xf8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2107      	movs	r1, #7
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bec:	f001 fbe2 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4816      	ldr	r0, [pc, #88]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000c08:	f001 fa38 	bl	800207c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000c20:	f001 fa2c 	bl	800207c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c24:	2307      	movs	r3, #7
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000c3c:	f001 fa1e 	bl	800207c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f001 f9e2 	bl	800200e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4a:	2028      	movs	r0, #40	; 0x28
 8000c4c:	f001 f9fb 	bl	8002046 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40020800 	.word	0x40020800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a4a      	ldr	r2, [pc, #296]	; (8000e08 <HAL_CAN_MspInit+0x148>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d13e      	bne.n	8000d60 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000cea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cec:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d10d      	bne.n	8000d10 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a3d      	ldr	r2, [pc, #244]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d3e:	2309      	movs	r3, #9
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4832      	ldr	r0, [pc, #200]	; (8000e14 <HAL_CAN_MspInit+0x154>)
 8000d4a:	f001 f997 	bl	800207c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2014      	movs	r0, #20
 8000d54:	f001 f95b 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d58:	2014      	movs	r0, #20
 8000d5a:	f001 f974 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d5e:	e04f      	b.n	8000e00 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2c      	ldr	r2, [pc, #176]	; (8000e18 <HAL_CAN_MspInit+0x158>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d14a      	bne.n	8000e00 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000d8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_CAN_MspInit+0x14c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10d      	bne.n	8000db4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_CAN_MspInit+0x150>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dd0:	2360      	movs	r3, #96	; 0x60
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000de0:	2309      	movs	r3, #9
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_CAN_MspInit+0x15c>)
 8000dec:	f001 f946 	bl	800207c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2040      	movs	r0, #64	; 0x40
 8000df6:	f001 f90a 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000dfa:	2040      	movs	r0, #64	; 0x40
 8000dfc:	f001 f923 	bl	8002046 <HAL_NVIC_EnableIRQ>
}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40006400 	.word	0x40006400
 8000e0c:	20000124 	.word	0x20000124
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40006800 	.word	0x40006800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f972 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <CAN1_RX0_IRQHandler+0x10>)
 8000e7a:	f000 fdbe 	bl	80019fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000088 	.word	0x20000088

08000e88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e90:	f001 faaa 	bl	80023e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <CAN2_RX0_IRQHandler+0x10>)
 8000e9e:	f000 fdac 	bl	80019fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000b0 	.word	0x200000b0

08000eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	return 1;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_kill>:

int _kill(int pid, int sig)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ec6:	f002 f89d 	bl	8003004 <__errno>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2216      	movs	r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
	return -1;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_exit>:

void _exit (int status)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffe7 	bl	8000ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eee:	e7fe      	b.n	8000eee <_exit+0x12>

08000ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
	}
	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_isatty>:

int _isatty(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f002 f802 	bl	8003004 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20020000 	.word	0x20020000
 800102c:	00000400 	.word	0x00000400
 8001030:	20000128 	.word	0x20000128
 8001034:	20000280 	.word	0x20000280

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001062:	490e      	ldr	r1, [pc, #56]	; (800109c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001078:	4c0b      	ldr	r4, [pc, #44]	; (80010a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001086:	f7ff ffd7 	bl	8001038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108a:	f001 ffc1 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fc29 	bl	80008e4 <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010a0:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 80010a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010a8:	2000027c 	.word	0x2000027c

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <HAL_Init+0x40>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_Init+0x40>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x40>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 ff8d 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fdc4 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023c00 	.word	0x40023c00

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ffa5 	bl	8002062 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 ff6d 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000004 	.word	0x20000004
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000000c 	.word	0x2000000c
 8001178:	2000012c 	.word	0x2000012c

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000012c 	.word	0x2000012c

08001194 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0ed      	b.n	8001382 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fd84 	bl	8000cc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c8:	f7ff ffd8 	bl	800117c <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ce:	e012      	b.n	80011f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d0:	f7ff ffd4 	bl	800117c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d90b      	bls.n	80011f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2205      	movs	r2, #5
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0c5      	b.n	8001382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0e5      	beq.n	80011d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0202 	bic.w	r2, r2, #2
 8001212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff ffb2 	bl	800117c <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800121a:	e012      	b.n	8001242 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121c:	f7ff ffae 	bl	800117c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e09f      	b.n	8001382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e5      	bne.n	800121c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e1b      	ldrb	r3, [r3, #24]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e007      	b.n	800127a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e5b      	ldrb	r3, [r3, #25]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e007      	b.n	80012a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e9b      	ldrb	r3, [r3, #26]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d108      	bne.n	80012be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e007      	b.n	80012ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0220 	bic.w	r2, r2, #32
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7edb      	ldrb	r3, [r3, #27]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0210 	bic.w	r2, r2, #16
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e007      	b.n	80012f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0210 	orr.w	r2, r2, #16
 80012f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7f1b      	ldrb	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d108      	bne.n	8001312 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e007      	b.n	8001322 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0208 	bic.w	r2, r2, #8
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7f5b      	ldrb	r3, [r3, #29]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d108      	bne.n	800133c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e007      	b.n	800134c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	ea42 0103 	orr.w	r1, r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013a4:	7cfb      	ldrb	r3, [r7, #19]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d003      	beq.n	80013b2 <HAL_CAN_ConfigFilter+0x26>
 80013aa:	7cfb      	ldrb	r3, [r7, #19]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f040 80be 	bne.w	800152e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_CAN_ConfigFilter+0x1bc>)
 80013b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	431a      	orrs	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2201      	movs	r2, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	401a      	ands	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d123      	bne.n	800145c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001436:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3248      	adds	r2, #72	; 0x48
 800143c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001450:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	3348      	adds	r3, #72	; 0x48
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d122      	bne.n	80014aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001484:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3248      	adds	r2, #72	; 0x48
 800148a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800149e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a0:	6979      	ldr	r1, [r7, #20]
 80014a2:	3348      	adds	r3, #72	; 0x48
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014c4:	e007      	b.n	80014d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014f0:	e007      	b.n	8001502 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001520:	f023 0201 	bic.w	r2, r3, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e006      	b.n	800153c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40006400 	.word	0x40006400

0800154c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d12e      	bne.n	80015be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001578:	f7ff fe00 	bl	800117c <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001580:	f7ff fdfc 	bl	800117c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d90b      	bls.n	80015a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2205      	movs	r2, #5
 800159e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e012      	b.n	80015cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e5      	bne.n	8001580 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e006      	b.n	80015cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f2:	7ffb      	ldrb	r3, [r7, #31]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d003      	beq.n	8001600 <HAL_CAN_AddTxMessage+0x2c>
 80015f8:	7ffb      	ldrb	r3, [r7, #31]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	f040 80b8 	bne.w	8001770 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10a      	bne.n	8001620 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80a0 	beq.w	8001760 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0e1b      	lsrs	r3, r3, #24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d907      	bls.n	8001640 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e09e      	b.n	800177e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001640:	2201      	movs	r2, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	409a      	lsls	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	6809      	ldr	r1, [r1, #0]
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3318      	adds	r3, #24
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	440b      	add	r3, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e00f      	b.n	800168e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001678:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001682:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3318      	adds	r3, #24
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	440b      	add	r3, r1
 800168c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3318      	adds	r3, #24
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	3304      	adds	r3, #4
 80016a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	7d1b      	ldrb	r3, [r3, #20]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d111      	bne.n	80016ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3318      	adds	r3, #24
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3318      	adds	r3, #24
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	3304      	adds	r3, #4
 80016cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3307      	adds	r3, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	061a      	lsls	r2, r3, #24
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3306      	adds	r3, #6
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3305      	adds	r3, #5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	4313      	orrs	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	3204      	adds	r2, #4
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	4610      	mov	r0, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6811      	ldr	r1, [r2, #0]
 80016f6:	ea43 0200 	orr.w	r2, r3, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	440b      	add	r3, r1
 8001700:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001704:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4610      	mov	r0, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	6811      	ldr	r1, [r2, #0]
 800172c:	ea43 0200 	orr.w	r2, r3, r0
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800173a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3318      	adds	r3, #24
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	440b      	add	r3, r1
 800175a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e00e      	b.n	800177e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e006      	b.n	800177e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_GetRxMessage+0x24>
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 80f3 	bne.w	8001994 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10e      	bne.n	80017d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e7      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d8      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	331b      	adds	r3, #27
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0204 	and.w	r2, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0d5b      	lsrs	r3, r3, #21
 800181e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00b      	b.n	8001840 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	331b      	adds	r3, #27
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0202 	and.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 020f 	and.w	r2, r3, #15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b2da      	uxtb	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	331b      	adds	r3, #27
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0a1a      	lsrs	r2, r3, #8
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0c1a      	lsrs	r2, r3, #16
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3302      	adds	r3, #2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e1a      	lsrs	r2, r3, #24
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3303      	adds	r3, #3
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3304      	adds	r3, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0a1a      	lsrs	r2, r3, #8
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	3305      	adds	r3, #5
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0c1a      	lsrs	r2, r3, #16
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3306      	adds	r3, #6
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e1a      	lsrs	r2, r3, #24
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	3307      	adds	r3, #7
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0220 	orr.w	r2, r2, #32
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	e007      	b.n	8001990 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e006      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d002      	beq.n	80019cc <HAL_CAN_ActivateNotification+0x1e>
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d109      	bne.n	80019e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6959      	ldr	r1, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e006      	b.n	80019ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08a      	sub	sp, #40	; 0x28
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d07c      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d023      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f983 	bl	8001d68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a62:	e016      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e00c      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e002      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f989 	bl	8001da4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d024      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f963 	bl	8001d7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001ab6:	e016      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e00c      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e002      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f969 	bl	8001db8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d024      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f943 	bl	8001d90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b0a:	e016      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e00c      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e002      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f949 	bl	8001dcc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2208      	movs	r2, #8
 8001b78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f930 	bl	8001de0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fe6b 	bl	8000874 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f912 	bl	8001e08 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8f9 	bl	8001df4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8fc 	bl	8001e1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8f5 	bl	8001e30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d07b      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d072      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d043      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03e      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc8:	2b60      	cmp	r3, #96	; 0x60
 8001cca:	d02b      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x32a>
 8001ccc:	2b60      	cmp	r3, #96	; 0x60
 8001cce:	d82e      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001cd0:	2b50      	cmp	r3, #80	; 0x50
 8001cd2:	d022      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x320>
 8001cd4:	2b50      	cmp	r3, #80	; 0x50
 8001cd6:	d82a      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001cd8:	2b40      	cmp	r3, #64	; 0x40
 8001cda:	d019      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x316>
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d826      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001ce0:	2b30      	cmp	r3, #48	; 0x30
 8001ce2:	d010      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x30c>
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d822      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d002      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2f8>
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d005      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cf0:	e01d      	b.n	8001d2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfa:	e019      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d04:	e014      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d0e:	e00f      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d18:	e00a      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d22:	e005      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d2c:	e000      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f872 	bl	8001e44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff29 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff3e 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff8e 	bl	8001f4c <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5d 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff31 	bl	8001ebc <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa2 	bl	8001fb4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e16b      	b.n	8002370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 815a 	bne.w	800236a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d130      	bne.n	8002130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b03      	cmp	r3, #3
 800213a:	d017      	beq.n	800216c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d123      	bne.n	80021c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80b4 	beq.w	800236a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b60      	ldr	r3, [pc, #384]	; (8002388 <HAL_GPIO_Init+0x30c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a5f      	ldr	r2, [pc, #380]	; (8002388 <HAL_GPIO_Init+0x30c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_GPIO_Init+0x30c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221e:	4a5b      	ldr	r2, [pc, #364]	; (800238c <HAL_GPIO_Init+0x310>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_GPIO_Init+0x314>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <HAL_GPIO_Init+0x226>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_GPIO_Init+0x318>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x222>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_GPIO_Init+0x31c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x21e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4f      	ldr	r2, [pc, #316]	; (800239c <HAL_GPIO_Init+0x320>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x21a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x216>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4d      	ldr	r2, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x328>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x212>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_GPIO_Init+0x32c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x20e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <HAL_GPIO_Init+0x330>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x20a>
 8002282:	2307      	movs	r3, #7
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 8002286:	2308      	movs	r3, #8
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x228>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x310>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_GPIO_Init+0x334>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e6:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <HAL_GPIO_Init+0x334>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_GPIO_Init+0x334>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_GPIO_Init+0x334>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_GPIO_Init+0x334>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x334>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_GPIO_Init+0x334>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_GPIO_Init+0x334>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae90 	bls.w	8002098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40021c00 	.word	0x40021c00
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f9be 	bl	8000788 <HAL_GPIO_EXTI_Callback>
  }
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e267      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002436:	4b88      	ldr	r3, [pc, #544]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00c      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b85      	ldr	r3, [pc, #532]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	2b08      	cmp	r3, #8
 800244c:	d112      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e242      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b70      	ldr	r3, [pc, #448]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6f      	ldr	r2, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6c      	ldr	r2, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe54 	bl	800117c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fe50 	bl	800117c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e207      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fe40 	bl	800117c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fe3c 	bl	800117c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1f3      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1c7      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCC_OscConfig+0x244>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fdf5 	bl	800117c <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe fdf1 	bl	800117c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1a8      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4925      	ldr	r1, [pc, #148]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x244>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fdd4 	bl	800117c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe fdd0 	bl	800117c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e187      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d036      	beq.n	8002670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_RCC_OscConfig+0x248>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fdb4 	bl	800117c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe fdb0 	bl	800117c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e167      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
 8002636:	e01b      	b.n	8002670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_OscConfig+0x248>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fd9d 	bl	800117c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	e00e      	b.n	8002664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe fd99 	bl	800117c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d907      	bls.n	8002664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e150      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	42470000 	.word	0x42470000
 8002660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ea      	bne.n	8002646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8097 	beq.w	80027ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b7d      	ldr	r3, [pc, #500]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a7c      	ldr	r2, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b7a      	ldr	r3, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b77      	ldr	r3, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a73      	ldr	r2, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fd59 	bl	800117c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe fd55 	bl	800117c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e10c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x2ea>
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a63      	ldr	r2, [pc, #396]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x30c>
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a5e      	ldr	r2, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a57      	ldr	r2, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fd1a 	bl	800117c <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe fd16 	bl	800117c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0cb      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ee      	beq.n	800274c <HAL_RCC_OscConfig+0x334>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe fd04 	bl	800117c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe fd00 	bl	800117c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0b5      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ee      	bne.n	8002778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a1 	beq.w	80028f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b6:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d05c      	beq.n	800287c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d141      	bne.n	800284e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fcd4 	bl	800117c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fcd0 	bl	800117c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e087      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	491b      	ldr	r1, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fca9 	bl	800117c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fca5 	bl	800117c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e05c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x416>
 800284c:	e054      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fc92 	bl	800117c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fc8e 	bl	800117c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e045      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x444>
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e038      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x4ec>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d028      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11a      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cc      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d90c      	bls.n	8002944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d044      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e067      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4934      	ldr	r1, [pc, #208]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fbc0 	bl	800117c <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fe fbbc 	bl	800117c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e04f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d20c      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fb20 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08003cc4 	.word	0x08003cc4
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b094      	sub	sp, #80	; 0x50
 8002ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aec:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d00d      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x40>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	f200 80e1 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b06:	e0db      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b0c:	e0db      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0e:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b12:	e0d8      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	2200      	movs	r2, #0
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
 8002b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	0159      	lsls	r1, r3, #5
 8002b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b58:	0150      	lsls	r0, r2, #5
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	1a51      	subs	r1, r2, r1
 8002b62:	6139      	str	r1, [r7, #16]
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b78:	4659      	mov	r1, fp
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b82:	4651      	mov	r1, sl
 8002b84:	018a      	lsls	r2, r1, #6
 8002b86:	4651      	mov	r1, sl
 8002b88:	ebb2 0801 	subs.w	r8, r2, r1
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba6:	4690      	mov	r8, r2
 8002ba8:	4699      	mov	r9, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	eb18 0303 	adds.w	r3, r8, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	eb49 0303 	adc.w	r3, r9, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	024b      	lsls	r3, r1, #9
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	024a      	lsls	r2, r1, #9
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be4:	f7fd fb44 	bl	8000270 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	e058      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
 8002c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0159      	lsls	r1, r3, #5
 8002c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1e:	0150      	lsls	r0, r2, #5
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4641      	mov	r1, r8
 8002c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c44:	ebb2 040a 	subs.w	r4, r2, sl
 8002c48:	eb63 050b 	sbc.w	r5, r3, fp
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	00eb      	lsls	r3, r5, #3
 8002c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4643      	mov	r3, r8
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb45 0303 	adc.w	r3, r5, r3
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	61fa      	str	r2, [r7, #28]
 8002c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c98:	f7fd faea 	bl	8000270 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3750      	adds	r7, #80	; 0x50
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <rand>:
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <rand+0x5c>)
 8002ce2:	b510      	push	{r4, lr}
 8002ce4:	681c      	ldr	r4, [r3, #0]
 8002ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce8:	b9b3      	cbnz	r3, 8002d18 <rand+0x38>
 8002cea:	2018      	movs	r0, #24
 8002cec:	f000 fa22 	bl	8003134 <malloc>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6320      	str	r0, [r4, #48]	; 0x30
 8002cf4:	b920      	cbnz	r0, 8002d00 <rand+0x20>
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <rand+0x60>)
 8002cf8:	4812      	ldr	r0, [pc, #72]	; (8002d44 <rand+0x64>)
 8002cfa:	2152      	movs	r1, #82	; 0x52
 8002cfc:	f000 f9b0 	bl	8003060 <__assert_func>
 8002d00:	4911      	ldr	r1, [pc, #68]	; (8002d48 <rand+0x68>)
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <rand+0x6c>)
 8002d04:	e9c0 1300 	strd	r1, r3, [r0]
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <rand+0x70>)
 8002d0a:	6083      	str	r3, [r0, #8]
 8002d0c:	230b      	movs	r3, #11
 8002d0e:	8183      	strh	r3, [r0, #12]
 8002d10:	2100      	movs	r1, #0
 8002d12:	2001      	movs	r0, #1
 8002d14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002d1a:	480e      	ldr	r0, [pc, #56]	; (8002d54 <rand+0x74>)
 8002d1c:	690b      	ldr	r3, [r1, #16]
 8002d1e:	694c      	ldr	r4, [r1, #20]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <rand+0x78>)
 8002d22:	4358      	muls	r0, r3
 8002d24:	fb02 0004 	mla	r0, r2, r4, r0
 8002d28:	fba3 3202 	umull	r3, r2, r3, r2
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	eb40 0002 	adc.w	r0, r0, r2
 8002d32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002d36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002d3a:	bd10      	pop	{r4, pc}
 8002d3c:	20000068 	.word	0x20000068
 8002d40:	08003cd4 	.word	0x08003cd4
 8002d44:	08003ceb 	.word	0x08003ceb
 8002d48:	abcd330e 	.word	0xabcd330e
 8002d4c:	e66d1234 	.word	0xe66d1234
 8002d50:	0005deec 	.word	0x0005deec
 8002d54:	5851f42d 	.word	0x5851f42d
 8002d58:	4c957f2d 	.word	0x4c957f2d

08002d5c <std>:
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	4604      	mov	r4, r0
 8002d62:	e9c0 3300 	strd	r3, r3, [r0]
 8002d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d6a:	6083      	str	r3, [r0, #8]
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d70:	81c2      	strh	r2, [r0, #14]
 8002d72:	6183      	str	r3, [r0, #24]
 8002d74:	4619      	mov	r1, r3
 8002d76:	2208      	movs	r2, #8
 8002d78:	305c      	adds	r0, #92	; 0x5c
 8002d7a:	f000 f8f4 	bl	8002f66 <memset>
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <std+0x58>)
 8002d80:	6263      	str	r3, [r4, #36]	; 0x24
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <std+0x5c>)
 8002d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <std+0x60>)
 8002d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <std+0x64>)
 8002d8c:	6323      	str	r3, [r4, #48]	; 0x30
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <std+0x68>)
 8002d90:	6224      	str	r4, [r4, #32]
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d006      	beq.n	8002da4 <std+0x48>
 8002d96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002d9a:	4294      	cmp	r4, r2
 8002d9c:	d002      	beq.n	8002da4 <std+0x48>
 8002d9e:	33d0      	adds	r3, #208	; 0xd0
 8002da0:	429c      	cmp	r4, r3
 8002da2:	d105      	bne.n	8002db0 <std+0x54>
 8002da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dac:	f000 b954 	b.w	8003058 <__retarget_lock_init_recursive>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
 8002db4:	08002ee1 	.word	0x08002ee1
 8002db8:	08002f03 	.word	0x08002f03
 8002dbc:	08002f3b 	.word	0x08002f3b
 8002dc0:	08002f5f 	.word	0x08002f5f
 8002dc4:	20000130 	.word	0x20000130

08002dc8 <stdio_exit_handler>:
 8002dc8:	4a02      	ldr	r2, [pc, #8]	; (8002dd4 <stdio_exit_handler+0xc>)
 8002dca:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <stdio_exit_handler+0x10>)
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <stdio_exit_handler+0x14>)
 8002dce:	f000 b869 	b.w	8002ea4 <_fwalk_sglue>
 8002dd2:	bf00      	nop
 8002dd4:	20000010 	.word	0x20000010
 8002dd8:	080033a9 	.word	0x080033a9
 8002ddc:	2000001c 	.word	0x2000001c

08002de0 <cleanup_stdio>:
 8002de0:	6841      	ldr	r1, [r0, #4]
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <cleanup_stdio+0x34>)
 8002de4:	4299      	cmp	r1, r3
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
 8002dea:	d001      	beq.n	8002df0 <cleanup_stdio+0x10>
 8002dec:	f000 fadc 	bl	80033a8 <_fflush_r>
 8002df0:	68a1      	ldr	r1, [r4, #8]
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <cleanup_stdio+0x38>)
 8002df4:	4299      	cmp	r1, r3
 8002df6:	d002      	beq.n	8002dfe <cleanup_stdio+0x1e>
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 fad5 	bl	80033a8 <_fflush_r>
 8002dfe:	68e1      	ldr	r1, [r4, #12]
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <cleanup_stdio+0x3c>)
 8002e02:	4299      	cmp	r1, r3
 8002e04:	d004      	beq.n	8002e10 <cleanup_stdio+0x30>
 8002e06:	4620      	mov	r0, r4
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e0c:	f000 bacc 	b.w	80033a8 <_fflush_r>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	20000130 	.word	0x20000130
 8002e18:	20000198 	.word	0x20000198
 8002e1c:	20000200 	.word	0x20000200

08002e20 <global_stdio_init.part.0>:
 8002e20:	b510      	push	{r4, lr}
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <global_stdio_init.part.0+0x30>)
 8002e24:	4c0b      	ldr	r4, [pc, #44]	; (8002e54 <global_stdio_init.part.0+0x34>)
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <global_stdio_init.part.0+0x38>)
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2104      	movs	r1, #4
 8002e30:	f7ff ff94 	bl	8002d5c <std>
 8002e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2109      	movs	r1, #9
 8002e3c:	f7ff ff8e 	bl	8002d5c <std>
 8002e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e44:	2202      	movs	r2, #2
 8002e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e4a:	2112      	movs	r1, #18
 8002e4c:	f7ff bf86 	b.w	8002d5c <std>
 8002e50:	20000268 	.word	0x20000268
 8002e54:	20000130 	.word	0x20000130
 8002e58:	08002dc9 	.word	0x08002dc9

08002e5c <__sfp_lock_acquire>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	; (8002e64 <__sfp_lock_acquire+0x8>)
 8002e5e:	f000 b8fc 	b.w	800305a <__retarget_lock_acquire_recursive>
 8002e62:	bf00      	nop
 8002e64:	20000271 	.word	0x20000271

08002e68 <__sfp_lock_release>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__sfp_lock_release+0x8>)
 8002e6a:	f000 b8f7 	b.w	800305c <__retarget_lock_release_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20000271 	.word	0x20000271

08002e74 <__sinit>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	f7ff fff0 	bl	8002e5c <__sfp_lock_acquire>
 8002e7c:	6a23      	ldr	r3, [r4, #32]
 8002e7e:	b11b      	cbz	r3, 8002e88 <__sinit+0x14>
 8002e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e84:	f7ff bff0 	b.w	8002e68 <__sfp_lock_release>
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__sinit+0x28>)
 8002e8a:	6223      	str	r3, [r4, #32]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <__sinit+0x2c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f5      	bne.n	8002e80 <__sinit+0xc>
 8002e94:	f7ff ffc4 	bl	8002e20 <global_stdio_init.part.0>
 8002e98:	e7f2      	b.n	8002e80 <__sinit+0xc>
 8002e9a:	bf00      	nop
 8002e9c:	08002de1 	.word	0x08002de1
 8002ea0:	20000268 	.word	0x20000268

08002ea4 <_fwalk_sglue>:
 8002ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	4688      	mov	r8, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8002eb8:	d505      	bpl.n	8002ec6 <_fwalk_sglue+0x22>
 8002eba:	6824      	ldr	r4, [r4, #0]
 8002ebc:	2c00      	cmp	r4, #0
 8002ebe:	d1f7      	bne.n	8002eb0 <_fwalk_sglue+0xc>
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ec6:	89ab      	ldrh	r3, [r5, #12]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d907      	bls.n	8002edc <_fwalk_sglue+0x38>
 8002ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	d003      	beq.n	8002edc <_fwalk_sglue+0x38>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	47c0      	blx	r8
 8002eda:	4306      	orrs	r6, r0
 8002edc:	3568      	adds	r5, #104	; 0x68
 8002ede:	e7e9      	b.n	8002eb4 <_fwalk_sglue+0x10>

08002ee0 <__sread>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee8:	f000 f868 	bl	8002fbc <_read_r>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	bfab      	itete	ge
 8002ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8002ef4:	181b      	addge	r3, r3, r0
 8002ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002efa:	bfac      	ite	ge
 8002efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002efe:	81a3      	strhlt	r3, [r4, #12]
 8002f00:	bd10      	pop	{r4, pc}

08002f02 <__swrite>:
 8002f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f06:	461f      	mov	r7, r3
 8002f08:	898b      	ldrh	r3, [r1, #12]
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4616      	mov	r6, r2
 8002f12:	d505      	bpl.n	8002f20 <__swrite+0x1e>
 8002f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f000 f83c 	bl	8002f98 <_lseek_r>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f2a:	81a3      	strh	r3, [r4, #12]
 8002f2c:	4632      	mov	r2, r6
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4628      	mov	r0, r5
 8002f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f36:	f000 b853 	b.w	8002fe0 <_write_r>

08002f3a <__sseek>:
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f42:	f000 f829 	bl	8002f98 <_lseek_r>
 8002f46:	1c43      	adds	r3, r0, #1
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	bf15      	itete	ne
 8002f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f56:	81a3      	strheq	r3, [r4, #12]
 8002f58:	bf18      	it	ne
 8002f5a:	81a3      	strhne	r3, [r4, #12]
 8002f5c:	bd10      	pop	{r4, pc}

08002f5e <__sclose>:
 8002f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f62:	f000 b809 	b.w	8002f78 <_close_r>

08002f66 <memset>:
 8002f66:	4402      	add	r2, r0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d100      	bne.n	8002f70 <memset+0xa>
 8002f6e:	4770      	bx	lr
 8002f70:	f803 1b01 	strb.w	r1, [r3], #1
 8002f74:	e7f9      	b.n	8002f6a <memset+0x4>
	...

08002f78 <_close_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_close_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd ffed 	bl	8000f62 <_close>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_close_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_close_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	2000026c 	.word	0x2000026c

08002f98 <_lseek_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4d07      	ldr	r5, [pc, #28]	; (8002fb8 <_lseek_r+0x20>)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fe f802 	bl	8000fb0 <_lseek>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_lseek_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_lseek_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	2000026c 	.word	0x2000026c

08002fbc <_read_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4d07      	ldr	r5, [pc, #28]	; (8002fdc <_read_r+0x20>)
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	602a      	str	r2, [r5, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f7fd ff90 	bl	8000ef0 <_read>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_read_r+0x1e>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_read_r+0x1e>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	2000026c 	.word	0x2000026c

08002fe0 <_write_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4d07      	ldr	r5, [pc, #28]	; (8003000 <_write_r+0x20>)
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	4608      	mov	r0, r1
 8002fe8:	4611      	mov	r1, r2
 8002fea:	2200      	movs	r2, #0
 8002fec:	602a      	str	r2, [r5, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7fd ff9b 	bl	8000f2a <_write>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_write_r+0x1e>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_write_r+0x1e>
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	2000026c 	.word	0x2000026c

08003004 <__errno>:
 8003004:	4b01      	ldr	r3, [pc, #4]	; (800300c <__errno+0x8>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000068 	.word	0x20000068

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	; (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	; (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	; (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	; (8003054 <__libc_init_array+0x44>)
 8003024:	f000 fe42 	bl	8003cac <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08003dbc 	.word	0x08003dbc
 800304c:	08003dbc 	.word	0x08003dbc
 8003050:	08003dbc 	.word	0x08003dbc
 8003054:	08003dc0 	.word	0x08003dc0

08003058 <__retarget_lock_init_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_acquire_recursive>:
 800305a:	4770      	bx	lr

0800305c <__retarget_lock_release_recursive>:
 800305c:	4770      	bx	lr
	...

08003060 <__assert_func>:
 8003060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003062:	4614      	mov	r4, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <__assert_func+0x2c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4605      	mov	r5, r0
 800306c:	68d8      	ldr	r0, [r3, #12]
 800306e:	b14c      	cbz	r4, 8003084 <__assert_func+0x24>
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <__assert_func+0x30>)
 8003072:	9100      	str	r1, [sp, #0]
 8003074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003078:	4906      	ldr	r1, [pc, #24]	; (8003094 <__assert_func+0x34>)
 800307a:	462b      	mov	r3, r5
 800307c:	f000 f9bc 	bl	80033f8 <fiprintf>
 8003080:	f000 f9dc 	bl	800343c <abort>
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__assert_func+0x38>)
 8003086:	461c      	mov	r4, r3
 8003088:	e7f3      	b.n	8003072 <__assert_func+0x12>
 800308a:	bf00      	nop
 800308c:	20000068 	.word	0x20000068
 8003090:	08003d43 	.word	0x08003d43
 8003094:	08003d50 	.word	0x08003d50
 8003098:	08003d7e 	.word	0x08003d7e

0800309c <_free_r>:
 800309c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800309e:	2900      	cmp	r1, #0
 80030a0:	d044      	beq.n	800312c <_free_r+0x90>
 80030a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a6:	9001      	str	r0, [sp, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f1a1 0404 	sub.w	r4, r1, #4
 80030ae:	bfb8      	it	lt
 80030b0:	18e4      	addlt	r4, r4, r3
 80030b2:	f000 f8e7 	bl	8003284 <__malloc_lock>
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <_free_r+0x94>)
 80030b8:	9801      	ldr	r0, [sp, #4]
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	b933      	cbnz	r3, 80030cc <_free_r+0x30>
 80030be:	6063      	str	r3, [r4, #4]
 80030c0:	6014      	str	r4, [r2, #0]
 80030c2:	b003      	add	sp, #12
 80030c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030c8:	f000 b8e2 	b.w	8003290 <__malloc_unlock>
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d908      	bls.n	80030e2 <_free_r+0x46>
 80030d0:	6825      	ldr	r5, [r4, #0]
 80030d2:	1961      	adds	r1, r4, r5
 80030d4:	428b      	cmp	r3, r1
 80030d6:	bf01      	itttt	eq
 80030d8:	6819      	ldreq	r1, [r3, #0]
 80030da:	685b      	ldreq	r3, [r3, #4]
 80030dc:	1949      	addeq	r1, r1, r5
 80030de:	6021      	streq	r1, [r4, #0]
 80030e0:	e7ed      	b.n	80030be <_free_r+0x22>
 80030e2:	461a      	mov	r2, r3
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	b10b      	cbz	r3, 80030ec <_free_r+0x50>
 80030e8:	42a3      	cmp	r3, r4
 80030ea:	d9fa      	bls.n	80030e2 <_free_r+0x46>
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	1855      	adds	r5, r2, r1
 80030f0:	42a5      	cmp	r5, r4
 80030f2:	d10b      	bne.n	800310c <_free_r+0x70>
 80030f4:	6824      	ldr	r4, [r4, #0]
 80030f6:	4421      	add	r1, r4
 80030f8:	1854      	adds	r4, r2, r1
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	d1e0      	bne.n	80030c2 <_free_r+0x26>
 8003100:	681c      	ldr	r4, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	6053      	str	r3, [r2, #4]
 8003106:	440c      	add	r4, r1
 8003108:	6014      	str	r4, [r2, #0]
 800310a:	e7da      	b.n	80030c2 <_free_r+0x26>
 800310c:	d902      	bls.n	8003114 <_free_r+0x78>
 800310e:	230c      	movs	r3, #12
 8003110:	6003      	str	r3, [r0, #0]
 8003112:	e7d6      	b.n	80030c2 <_free_r+0x26>
 8003114:	6825      	ldr	r5, [r4, #0]
 8003116:	1961      	adds	r1, r4, r5
 8003118:	428b      	cmp	r3, r1
 800311a:	bf04      	itt	eq
 800311c:	6819      	ldreq	r1, [r3, #0]
 800311e:	685b      	ldreq	r3, [r3, #4]
 8003120:	6063      	str	r3, [r4, #4]
 8003122:	bf04      	itt	eq
 8003124:	1949      	addeq	r1, r1, r5
 8003126:	6021      	streq	r1, [r4, #0]
 8003128:	6054      	str	r4, [r2, #4]
 800312a:	e7ca      	b.n	80030c2 <_free_r+0x26>
 800312c:	b003      	add	sp, #12
 800312e:	bd30      	pop	{r4, r5, pc}
 8003130:	20000274 	.word	0x20000274

08003134 <malloc>:
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <malloc+0xc>)
 8003136:	4601      	mov	r1, r0
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	f000 b823 	b.w	8003184 <_malloc_r>
 800313e:	bf00      	nop
 8003140:	20000068 	.word	0x20000068

08003144 <sbrk_aligned>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4e0e      	ldr	r6, [pc, #56]	; (8003180 <sbrk_aligned+0x3c>)
 8003148:	460c      	mov	r4, r1
 800314a:	6831      	ldr	r1, [r6, #0]
 800314c:	4605      	mov	r5, r0
 800314e:	b911      	cbnz	r1, 8003156 <sbrk_aligned+0x12>
 8003150:	f000 f964 	bl	800341c <_sbrk_r>
 8003154:	6030      	str	r0, [r6, #0]
 8003156:	4621      	mov	r1, r4
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f95f 	bl	800341c <_sbrk_r>
 800315e:	1c43      	adds	r3, r0, #1
 8003160:	d00a      	beq.n	8003178 <sbrk_aligned+0x34>
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d007      	beq.n	800317c <sbrk_aligned+0x38>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 f954 	bl	800341c <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d101      	bne.n	800317c <sbrk_aligned+0x38>
 8003178:	f04f 34ff 	mov.w	r4, #4294967295
 800317c:	4620      	mov	r0, r4
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	20000278 	.word	0x20000278

08003184 <_malloc_r>:
 8003184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003188:	1ccd      	adds	r5, r1, #3
 800318a:	f025 0503 	bic.w	r5, r5, #3
 800318e:	3508      	adds	r5, #8
 8003190:	2d0c      	cmp	r5, #12
 8003192:	bf38      	it	cc
 8003194:	250c      	movcc	r5, #12
 8003196:	2d00      	cmp	r5, #0
 8003198:	4607      	mov	r7, r0
 800319a:	db01      	blt.n	80031a0 <_malloc_r+0x1c>
 800319c:	42a9      	cmp	r1, r5
 800319e:	d905      	bls.n	80031ac <_malloc_r+0x28>
 80031a0:	230c      	movs	r3, #12
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	2600      	movs	r6, #0
 80031a6:	4630      	mov	r0, r6
 80031a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003280 <_malloc_r+0xfc>
 80031b0:	f000 f868 	bl	8003284 <__malloc_lock>
 80031b4:	f8d8 3000 	ldr.w	r3, [r8]
 80031b8:	461c      	mov	r4, r3
 80031ba:	bb5c      	cbnz	r4, 8003214 <_malloc_r+0x90>
 80031bc:	4629      	mov	r1, r5
 80031be:	4638      	mov	r0, r7
 80031c0:	f7ff ffc0 	bl	8003144 <sbrk_aligned>
 80031c4:	1c43      	adds	r3, r0, #1
 80031c6:	4604      	mov	r4, r0
 80031c8:	d155      	bne.n	8003276 <_malloc_r+0xf2>
 80031ca:	f8d8 4000 	ldr.w	r4, [r8]
 80031ce:	4626      	mov	r6, r4
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d145      	bne.n	8003260 <_malloc_r+0xdc>
 80031d4:	2c00      	cmp	r4, #0
 80031d6:	d048      	beq.n	800326a <_malloc_r+0xe6>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	4631      	mov	r1, r6
 80031dc:	4638      	mov	r0, r7
 80031de:	eb04 0903 	add.w	r9, r4, r3
 80031e2:	f000 f91b 	bl	800341c <_sbrk_r>
 80031e6:	4581      	cmp	r9, r0
 80031e8:	d13f      	bne.n	800326a <_malloc_r+0xe6>
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	1a6d      	subs	r5, r5, r1
 80031ee:	4629      	mov	r1, r5
 80031f0:	4638      	mov	r0, r7
 80031f2:	f7ff ffa7 	bl	8003144 <sbrk_aligned>
 80031f6:	3001      	adds	r0, #1
 80031f8:	d037      	beq.n	800326a <_malloc_r+0xe6>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	442b      	add	r3, r5
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	f8d8 3000 	ldr.w	r3, [r8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d038      	beq.n	800327a <_malloc_r+0xf6>
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	42a2      	cmp	r2, r4
 800320c:	d12b      	bne.n	8003266 <_malloc_r+0xe2>
 800320e:	2200      	movs	r2, #0
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e00f      	b.n	8003234 <_malloc_r+0xb0>
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	1b52      	subs	r2, r2, r5
 8003218:	d41f      	bmi.n	800325a <_malloc_r+0xd6>
 800321a:	2a0b      	cmp	r2, #11
 800321c:	d917      	bls.n	800324e <_malloc_r+0xca>
 800321e:	1961      	adds	r1, r4, r5
 8003220:	42a3      	cmp	r3, r4
 8003222:	6025      	str	r5, [r4, #0]
 8003224:	bf18      	it	ne
 8003226:	6059      	strne	r1, [r3, #4]
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	bf08      	it	eq
 800322c:	f8c8 1000 	streq.w	r1, [r8]
 8003230:	5162      	str	r2, [r4, r5]
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	4638      	mov	r0, r7
 8003236:	f104 060b 	add.w	r6, r4, #11
 800323a:	f000 f829 	bl	8003290 <__malloc_unlock>
 800323e:	f026 0607 	bic.w	r6, r6, #7
 8003242:	1d23      	adds	r3, r4, #4
 8003244:	1af2      	subs	r2, r6, r3
 8003246:	d0ae      	beq.n	80031a6 <_malloc_r+0x22>
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	50a3      	str	r3, [r4, r2]
 800324c:	e7ab      	b.n	80031a6 <_malloc_r+0x22>
 800324e:	42a3      	cmp	r3, r4
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	d1dd      	bne.n	8003210 <_malloc_r+0x8c>
 8003254:	f8c8 2000 	str.w	r2, [r8]
 8003258:	e7ec      	b.n	8003234 <_malloc_r+0xb0>
 800325a:	4623      	mov	r3, r4
 800325c:	6864      	ldr	r4, [r4, #4]
 800325e:	e7ac      	b.n	80031ba <_malloc_r+0x36>
 8003260:	4634      	mov	r4, r6
 8003262:	6876      	ldr	r6, [r6, #4]
 8003264:	e7b4      	b.n	80031d0 <_malloc_r+0x4c>
 8003266:	4613      	mov	r3, r2
 8003268:	e7cc      	b.n	8003204 <_malloc_r+0x80>
 800326a:	230c      	movs	r3, #12
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4638      	mov	r0, r7
 8003270:	f000 f80e 	bl	8003290 <__malloc_unlock>
 8003274:	e797      	b.n	80031a6 <_malloc_r+0x22>
 8003276:	6025      	str	r5, [r4, #0]
 8003278:	e7dc      	b.n	8003234 <_malloc_r+0xb0>
 800327a:	605b      	str	r3, [r3, #4]
 800327c:	deff      	udf	#255	; 0xff
 800327e:	bf00      	nop
 8003280:	20000274 	.word	0x20000274

08003284 <__malloc_lock>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__malloc_lock+0x8>)
 8003286:	f7ff bee8 	b.w	800305a <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	20000270 	.word	0x20000270

08003290 <__malloc_unlock>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__malloc_unlock+0x8>)
 8003292:	f7ff bee3 	b.w	800305c <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	20000270 	.word	0x20000270

0800329c <__sflush_r>:
 800329c:	898a      	ldrh	r2, [r1, #12]
 800329e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a2:	4605      	mov	r5, r0
 80032a4:	0710      	lsls	r0, r2, #28
 80032a6:	460c      	mov	r4, r1
 80032a8:	d458      	bmi.n	800335c <__sflush_r+0xc0>
 80032aa:	684b      	ldr	r3, [r1, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dc05      	bgt.n	80032bc <__sflush_r+0x20>
 80032b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dc02      	bgt.n	80032bc <__sflush_r+0x20>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032be:	2e00      	cmp	r6, #0
 80032c0:	d0f9      	beq.n	80032b6 <__sflush_r+0x1a>
 80032c2:	2300      	movs	r3, #0
 80032c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032c8:	682f      	ldr	r7, [r5, #0]
 80032ca:	6a21      	ldr	r1, [r4, #32]
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	d032      	beq.n	8003336 <__sflush_r+0x9a>
 80032d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	075a      	lsls	r2, r3, #29
 80032d6:	d505      	bpl.n	80032e4 <__sflush_r+0x48>
 80032d8:	6863      	ldr	r3, [r4, #4]
 80032da:	1ac0      	subs	r0, r0, r3
 80032dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032de:	b10b      	cbz	r3, 80032e4 <__sflush_r+0x48>
 80032e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e2:	1ac0      	subs	r0, r0, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	4602      	mov	r2, r0
 80032e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ea:	6a21      	ldr	r1, [r4, #32]
 80032ec:	4628      	mov	r0, r5
 80032ee:	47b0      	blx	r6
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	d106      	bne.n	8003304 <__sflush_r+0x68>
 80032f6:	6829      	ldr	r1, [r5, #0]
 80032f8:	291d      	cmp	r1, #29
 80032fa:	d82b      	bhi.n	8003354 <__sflush_r+0xb8>
 80032fc:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <__sflush_r+0x108>)
 80032fe:	410a      	asrs	r2, r1
 8003300:	07d6      	lsls	r6, r2, #31
 8003302:	d427      	bmi.n	8003354 <__sflush_r+0xb8>
 8003304:	2200      	movs	r2, #0
 8003306:	6062      	str	r2, [r4, #4]
 8003308:	04d9      	lsls	r1, r3, #19
 800330a:	6922      	ldr	r2, [r4, #16]
 800330c:	6022      	str	r2, [r4, #0]
 800330e:	d504      	bpl.n	800331a <__sflush_r+0x7e>
 8003310:	1c42      	adds	r2, r0, #1
 8003312:	d101      	bne.n	8003318 <__sflush_r+0x7c>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	b903      	cbnz	r3, 800331a <__sflush_r+0x7e>
 8003318:	6560      	str	r0, [r4, #84]	; 0x54
 800331a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800331c:	602f      	str	r7, [r5, #0]
 800331e:	2900      	cmp	r1, #0
 8003320:	d0c9      	beq.n	80032b6 <__sflush_r+0x1a>
 8003322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003326:	4299      	cmp	r1, r3
 8003328:	d002      	beq.n	8003330 <__sflush_r+0x94>
 800332a:	4628      	mov	r0, r5
 800332c:	f7ff feb6 	bl	800309c <_free_r>
 8003330:	2000      	movs	r0, #0
 8003332:	6360      	str	r0, [r4, #52]	; 0x34
 8003334:	e7c0      	b.n	80032b8 <__sflush_r+0x1c>
 8003336:	2301      	movs	r3, #1
 8003338:	4628      	mov	r0, r5
 800333a:	47b0      	blx	r6
 800333c:	1c41      	adds	r1, r0, #1
 800333e:	d1c8      	bne.n	80032d2 <__sflush_r+0x36>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0c5      	beq.n	80032d2 <__sflush_r+0x36>
 8003346:	2b1d      	cmp	r3, #29
 8003348:	d001      	beq.n	800334e <__sflush_r+0xb2>
 800334a:	2b16      	cmp	r3, #22
 800334c:	d101      	bne.n	8003352 <__sflush_r+0xb6>
 800334e:	602f      	str	r7, [r5, #0]
 8003350:	e7b1      	b.n	80032b6 <__sflush_r+0x1a>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	e7ad      	b.n	80032b8 <__sflush_r+0x1c>
 800335c:	690f      	ldr	r7, [r1, #16]
 800335e:	2f00      	cmp	r7, #0
 8003360:	d0a9      	beq.n	80032b6 <__sflush_r+0x1a>
 8003362:	0793      	lsls	r3, r2, #30
 8003364:	680e      	ldr	r6, [r1, #0]
 8003366:	bf08      	it	eq
 8003368:	694b      	ldreq	r3, [r1, #20]
 800336a:	600f      	str	r7, [r1, #0]
 800336c:	bf18      	it	ne
 800336e:	2300      	movne	r3, #0
 8003370:	eba6 0807 	sub.w	r8, r6, r7
 8003374:	608b      	str	r3, [r1, #8]
 8003376:	f1b8 0f00 	cmp.w	r8, #0
 800337a:	dd9c      	ble.n	80032b6 <__sflush_r+0x1a>
 800337c:	6a21      	ldr	r1, [r4, #32]
 800337e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003380:	4643      	mov	r3, r8
 8003382:	463a      	mov	r2, r7
 8003384:	4628      	mov	r0, r5
 8003386:	47b0      	blx	r6
 8003388:	2800      	cmp	r0, #0
 800338a:	dc06      	bgt.n	800339a <__sflush_r+0xfe>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e78e      	b.n	80032b8 <__sflush_r+0x1c>
 800339a:	4407      	add	r7, r0
 800339c:	eba8 0800 	sub.w	r8, r8, r0
 80033a0:	e7e9      	b.n	8003376 <__sflush_r+0xda>
 80033a2:	bf00      	nop
 80033a4:	dfbffffe 	.word	0xdfbffffe

080033a8 <_fflush_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	690b      	ldr	r3, [r1, #16]
 80033ac:	4605      	mov	r5, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	b913      	cbnz	r3, 80033b8 <_fflush_r+0x10>
 80033b2:	2500      	movs	r5, #0
 80033b4:	4628      	mov	r0, r5
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
 80033b8:	b118      	cbz	r0, 80033c2 <_fflush_r+0x1a>
 80033ba:	6a03      	ldr	r3, [r0, #32]
 80033bc:	b90b      	cbnz	r3, 80033c2 <_fflush_r+0x1a>
 80033be:	f7ff fd59 	bl	8002e74 <__sinit>
 80033c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f3      	beq.n	80033b2 <_fflush_r+0xa>
 80033ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033cc:	07d0      	lsls	r0, r2, #31
 80033ce:	d404      	bmi.n	80033da <_fflush_r+0x32>
 80033d0:	0599      	lsls	r1, r3, #22
 80033d2:	d402      	bmi.n	80033da <_fflush_r+0x32>
 80033d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033d6:	f7ff fe40 	bl	800305a <__retarget_lock_acquire_recursive>
 80033da:	4628      	mov	r0, r5
 80033dc:	4621      	mov	r1, r4
 80033de:	f7ff ff5d 	bl	800329c <__sflush_r>
 80033e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033e4:	07da      	lsls	r2, r3, #31
 80033e6:	4605      	mov	r5, r0
 80033e8:	d4e4      	bmi.n	80033b4 <_fflush_r+0xc>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	059b      	lsls	r3, r3, #22
 80033ee:	d4e1      	bmi.n	80033b4 <_fflush_r+0xc>
 80033f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033f2:	f7ff fe33 	bl	800305c <__retarget_lock_release_recursive>
 80033f6:	e7dd      	b.n	80033b4 <_fflush_r+0xc>

080033f8 <fiprintf>:
 80033f8:	b40e      	push	{r1, r2, r3}
 80033fa:	b503      	push	{r0, r1, lr}
 80033fc:	4601      	mov	r1, r0
 80033fe:	ab03      	add	r3, sp, #12
 8003400:	4805      	ldr	r0, [pc, #20]	; (8003418 <fiprintf+0x20>)
 8003402:	f853 2b04 	ldr.w	r2, [r3], #4
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	f000 f847 	bl	800349c <_vfiprintf_r>
 800340e:	b002      	add	sp, #8
 8003410:	f85d eb04 	ldr.w	lr, [sp], #4
 8003414:	b003      	add	sp, #12
 8003416:	4770      	bx	lr
 8003418:	20000068 	.word	0x20000068

0800341c <_sbrk_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d06      	ldr	r5, [pc, #24]	; (8003438 <_sbrk_r+0x1c>)
 8003420:	2300      	movs	r3, #0
 8003422:	4604      	mov	r4, r0
 8003424:	4608      	mov	r0, r1
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f7fd fdd0 	bl	8000fcc <_sbrk>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_sbrk_r+0x1a>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_sbrk_r+0x1a>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	2000026c 	.word	0x2000026c

0800343c <abort>:
 800343c:	b508      	push	{r3, lr}
 800343e:	2006      	movs	r0, #6
 8003440:	f000 fb94 	bl	8003b6c <raise>
 8003444:	2001      	movs	r0, #1
 8003446:	f7fd fd49 	bl	8000edc <_exit>

0800344a <__sfputc_r>:
 800344a:	6893      	ldr	r3, [r2, #8]
 800344c:	3b01      	subs	r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	b410      	push	{r4}
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	da08      	bge.n	8003468 <__sfputc_r+0x1e>
 8003456:	6994      	ldr	r4, [r2, #24]
 8003458:	42a3      	cmp	r3, r4
 800345a:	db01      	blt.n	8003460 <__sfputc_r+0x16>
 800345c:	290a      	cmp	r1, #10
 800345e:	d103      	bne.n	8003468 <__sfputc_r+0x1e>
 8003460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003464:	f000 bac4 	b.w	80039f0 <__swbuf_r>
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	1c58      	adds	r0, r3, #1
 800346c:	6010      	str	r0, [r2, #0]
 800346e:	7019      	strb	r1, [r3, #0]
 8003470:	4608      	mov	r0, r1
 8003472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003476:	4770      	bx	lr

08003478 <__sfputs_r>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	4606      	mov	r6, r0
 800347c:	460f      	mov	r7, r1
 800347e:	4614      	mov	r4, r2
 8003480:	18d5      	adds	r5, r2, r3
 8003482:	42ac      	cmp	r4, r5
 8003484:	d101      	bne.n	800348a <__sfputs_r+0x12>
 8003486:	2000      	movs	r0, #0
 8003488:	e007      	b.n	800349a <__sfputs_r+0x22>
 800348a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348e:	463a      	mov	r2, r7
 8003490:	4630      	mov	r0, r6
 8003492:	f7ff ffda 	bl	800344a <__sfputc_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d1f3      	bne.n	8003482 <__sfputs_r+0xa>
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800349c <_vfiprintf_r>:
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	460d      	mov	r5, r1
 80034a2:	b09d      	sub	sp, #116	; 0x74
 80034a4:	4614      	mov	r4, r2
 80034a6:	4698      	mov	r8, r3
 80034a8:	4606      	mov	r6, r0
 80034aa:	b118      	cbz	r0, 80034b4 <_vfiprintf_r+0x18>
 80034ac:	6a03      	ldr	r3, [r0, #32]
 80034ae:	b90b      	cbnz	r3, 80034b4 <_vfiprintf_r+0x18>
 80034b0:	f7ff fce0 	bl	8002e74 <__sinit>
 80034b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034b6:	07d9      	lsls	r1, r3, #31
 80034b8:	d405      	bmi.n	80034c6 <_vfiprintf_r+0x2a>
 80034ba:	89ab      	ldrh	r3, [r5, #12]
 80034bc:	059a      	lsls	r2, r3, #22
 80034be:	d402      	bmi.n	80034c6 <_vfiprintf_r+0x2a>
 80034c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034c2:	f7ff fdca 	bl	800305a <__retarget_lock_acquire_recursive>
 80034c6:	89ab      	ldrh	r3, [r5, #12]
 80034c8:	071b      	lsls	r3, r3, #28
 80034ca:	d501      	bpl.n	80034d0 <_vfiprintf_r+0x34>
 80034cc:	692b      	ldr	r3, [r5, #16]
 80034ce:	b99b      	cbnz	r3, 80034f8 <_vfiprintf_r+0x5c>
 80034d0:	4629      	mov	r1, r5
 80034d2:	4630      	mov	r0, r6
 80034d4:	f000 faca 	bl	8003a6c <__swsetup_r>
 80034d8:	b170      	cbz	r0, 80034f8 <_vfiprintf_r+0x5c>
 80034da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034dc:	07dc      	lsls	r4, r3, #31
 80034de:	d504      	bpl.n	80034ea <_vfiprintf_r+0x4e>
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	b01d      	add	sp, #116	; 0x74
 80034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ea:	89ab      	ldrh	r3, [r5, #12]
 80034ec:	0598      	lsls	r0, r3, #22
 80034ee:	d4f7      	bmi.n	80034e0 <_vfiprintf_r+0x44>
 80034f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034f2:	f7ff fdb3 	bl	800305c <__retarget_lock_release_recursive>
 80034f6:	e7f3      	b.n	80034e0 <_vfiprintf_r+0x44>
 80034f8:	2300      	movs	r3, #0
 80034fa:	9309      	str	r3, [sp, #36]	; 0x24
 80034fc:	2320      	movs	r3, #32
 80034fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003502:	f8cd 800c 	str.w	r8, [sp, #12]
 8003506:	2330      	movs	r3, #48	; 0x30
 8003508:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80036bc <_vfiprintf_r+0x220>
 800350c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003510:	f04f 0901 	mov.w	r9, #1
 8003514:	4623      	mov	r3, r4
 8003516:	469a      	mov	sl, r3
 8003518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800351c:	b10a      	cbz	r2, 8003522 <_vfiprintf_r+0x86>
 800351e:	2a25      	cmp	r2, #37	; 0x25
 8003520:	d1f9      	bne.n	8003516 <_vfiprintf_r+0x7a>
 8003522:	ebba 0b04 	subs.w	fp, sl, r4
 8003526:	d00b      	beq.n	8003540 <_vfiprintf_r+0xa4>
 8003528:	465b      	mov	r3, fp
 800352a:	4622      	mov	r2, r4
 800352c:	4629      	mov	r1, r5
 800352e:	4630      	mov	r0, r6
 8003530:	f7ff ffa2 	bl	8003478 <__sfputs_r>
 8003534:	3001      	adds	r0, #1
 8003536:	f000 80a9 	beq.w	800368c <_vfiprintf_r+0x1f0>
 800353a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800353c:	445a      	add	r2, fp
 800353e:	9209      	str	r2, [sp, #36]	; 0x24
 8003540:	f89a 3000 	ldrb.w	r3, [sl]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a1 	beq.w	800368c <_vfiprintf_r+0x1f0>
 800354a:	2300      	movs	r3, #0
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003554:	f10a 0a01 	add.w	sl, sl, #1
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003560:	931a      	str	r3, [sp, #104]	; 0x68
 8003562:	4654      	mov	r4, sl
 8003564:	2205      	movs	r2, #5
 8003566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356a:	4854      	ldr	r0, [pc, #336]	; (80036bc <_vfiprintf_r+0x220>)
 800356c:	f7fc fe30 	bl	80001d0 <memchr>
 8003570:	9a04      	ldr	r2, [sp, #16]
 8003572:	b9d8      	cbnz	r0, 80035ac <_vfiprintf_r+0x110>
 8003574:	06d1      	lsls	r1, r2, #27
 8003576:	bf44      	itt	mi
 8003578:	2320      	movmi	r3, #32
 800357a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800357e:	0713      	lsls	r3, r2, #28
 8003580:	bf44      	itt	mi
 8003582:	232b      	movmi	r3, #43	; 0x2b
 8003584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003588:	f89a 3000 	ldrb.w	r3, [sl]
 800358c:	2b2a      	cmp	r3, #42	; 0x2a
 800358e:	d015      	beq.n	80035bc <_vfiprintf_r+0x120>
 8003590:	9a07      	ldr	r2, [sp, #28]
 8003592:	4654      	mov	r4, sl
 8003594:	2000      	movs	r0, #0
 8003596:	f04f 0c0a 	mov.w	ip, #10
 800359a:	4621      	mov	r1, r4
 800359c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a0:	3b30      	subs	r3, #48	; 0x30
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d94d      	bls.n	8003642 <_vfiprintf_r+0x1a6>
 80035a6:	b1b0      	cbz	r0, 80035d6 <_vfiprintf_r+0x13a>
 80035a8:	9207      	str	r2, [sp, #28]
 80035aa:	e014      	b.n	80035d6 <_vfiprintf_r+0x13a>
 80035ac:	eba0 0308 	sub.w	r3, r0, r8
 80035b0:	fa09 f303 	lsl.w	r3, r9, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	46a2      	mov	sl, r4
 80035ba:	e7d2      	b.n	8003562 <_vfiprintf_r+0xc6>
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	1d19      	adds	r1, r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	9103      	str	r1, [sp, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bfbb      	ittet	lt
 80035c8:	425b      	neglt	r3, r3
 80035ca:	f042 0202 	orrlt.w	r2, r2, #2
 80035ce:	9307      	strge	r3, [sp, #28]
 80035d0:	9307      	strlt	r3, [sp, #28]
 80035d2:	bfb8      	it	lt
 80035d4:	9204      	strlt	r2, [sp, #16]
 80035d6:	7823      	ldrb	r3, [r4, #0]
 80035d8:	2b2e      	cmp	r3, #46	; 0x2e
 80035da:	d10c      	bne.n	80035f6 <_vfiprintf_r+0x15a>
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	2b2a      	cmp	r3, #42	; 0x2a
 80035e0:	d134      	bne.n	800364c <_vfiprintf_r+0x1b0>
 80035e2:	9b03      	ldr	r3, [sp, #12]
 80035e4:	1d1a      	adds	r2, r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bfb8      	it	lt
 80035ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80035f2:	3402      	adds	r4, #2
 80035f4:	9305      	str	r3, [sp, #20]
 80035f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80036cc <_vfiprintf_r+0x230>
 80035fa:	7821      	ldrb	r1, [r4, #0]
 80035fc:	2203      	movs	r2, #3
 80035fe:	4650      	mov	r0, sl
 8003600:	f7fc fde6 	bl	80001d0 <memchr>
 8003604:	b138      	cbz	r0, 8003616 <_vfiprintf_r+0x17a>
 8003606:	9b04      	ldr	r3, [sp, #16]
 8003608:	eba0 000a 	sub.w	r0, r0, sl
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	4082      	lsls	r2, r0
 8003610:	4313      	orrs	r3, r2
 8003612:	3401      	adds	r4, #1
 8003614:	9304      	str	r3, [sp, #16]
 8003616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361a:	4829      	ldr	r0, [pc, #164]	; (80036c0 <_vfiprintf_r+0x224>)
 800361c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003620:	2206      	movs	r2, #6
 8003622:	f7fc fdd5 	bl	80001d0 <memchr>
 8003626:	2800      	cmp	r0, #0
 8003628:	d03f      	beq.n	80036aa <_vfiprintf_r+0x20e>
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <_vfiprintf_r+0x228>)
 800362c:	bb1b      	cbnz	r3, 8003676 <_vfiprintf_r+0x1da>
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	3307      	adds	r3, #7
 8003632:	f023 0307 	bic.w	r3, r3, #7
 8003636:	3308      	adds	r3, #8
 8003638:	9303      	str	r3, [sp, #12]
 800363a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363c:	443b      	add	r3, r7
 800363e:	9309      	str	r3, [sp, #36]	; 0x24
 8003640:	e768      	b.n	8003514 <_vfiprintf_r+0x78>
 8003642:	fb0c 3202 	mla	r2, ip, r2, r3
 8003646:	460c      	mov	r4, r1
 8003648:	2001      	movs	r0, #1
 800364a:	e7a6      	b.n	800359a <_vfiprintf_r+0xfe>
 800364c:	2300      	movs	r3, #0
 800364e:	3401      	adds	r4, #1
 8003650:	9305      	str	r3, [sp, #20]
 8003652:	4619      	mov	r1, r3
 8003654:	f04f 0c0a 	mov.w	ip, #10
 8003658:	4620      	mov	r0, r4
 800365a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800365e:	3a30      	subs	r2, #48	; 0x30
 8003660:	2a09      	cmp	r2, #9
 8003662:	d903      	bls.n	800366c <_vfiprintf_r+0x1d0>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0c6      	beq.n	80035f6 <_vfiprintf_r+0x15a>
 8003668:	9105      	str	r1, [sp, #20]
 800366a:	e7c4      	b.n	80035f6 <_vfiprintf_r+0x15a>
 800366c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003670:	4604      	mov	r4, r0
 8003672:	2301      	movs	r3, #1
 8003674:	e7f0      	b.n	8003658 <_vfiprintf_r+0x1bc>
 8003676:	ab03      	add	r3, sp, #12
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	462a      	mov	r2, r5
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <_vfiprintf_r+0x22c>)
 800367e:	a904      	add	r1, sp, #16
 8003680:	4630      	mov	r0, r6
 8003682:	f3af 8000 	nop.w
 8003686:	4607      	mov	r7, r0
 8003688:	1c78      	adds	r0, r7, #1
 800368a:	d1d6      	bne.n	800363a <_vfiprintf_r+0x19e>
 800368c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800368e:	07d9      	lsls	r1, r3, #31
 8003690:	d405      	bmi.n	800369e <_vfiprintf_r+0x202>
 8003692:	89ab      	ldrh	r3, [r5, #12]
 8003694:	059a      	lsls	r2, r3, #22
 8003696:	d402      	bmi.n	800369e <_vfiprintf_r+0x202>
 8003698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800369a:	f7ff fcdf 	bl	800305c <__retarget_lock_release_recursive>
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	065b      	lsls	r3, r3, #25
 80036a2:	f53f af1d 	bmi.w	80034e0 <_vfiprintf_r+0x44>
 80036a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a8:	e71c      	b.n	80034e4 <_vfiprintf_r+0x48>
 80036aa:	ab03      	add	r3, sp, #12
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	462a      	mov	r2, r5
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <_vfiprintf_r+0x22c>)
 80036b2:	a904      	add	r1, sp, #16
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f879 	bl	80037ac <_printf_i>
 80036ba:	e7e4      	b.n	8003686 <_vfiprintf_r+0x1ea>
 80036bc:	08003d7f 	.word	0x08003d7f
 80036c0:	08003d89 	.word	0x08003d89
 80036c4:	00000000 	.word	0x00000000
 80036c8:	08003479 	.word	0x08003479
 80036cc:	08003d85 	.word	0x08003d85

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4699      	mov	r9, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bfb8      	it	lt
 80036e4:	4613      	movlt	r3, r2
 80036e6:	6033      	str	r3, [r6, #0]
 80036e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ec:	4607      	mov	r7, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc26      	bgt.n	8003766 <_printf_common+0x96>
 8003718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d42b      	bmi.n	8003780 <_printf_common+0xb0>
 8003728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800372c:	4649      	mov	r1, r9
 800372e:	4638      	mov	r0, r7
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d01e      	beq.n	8003774 <_printf_common+0xa4>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf02      	ittt	eq
 8003742:	68e5      	ldreq	r5, [r4, #12]
 8003744:	6833      	ldreq	r3, [r6, #0]
 8003746:	1aed      	subeq	r5, r5, r3
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	bf0c      	ite	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	2500      	movne	r5, #0
 8003752:	4293      	cmp	r3, r2
 8003754:	bfc4      	itt	gt
 8003756:	1a9b      	subgt	r3, r3, r2
 8003758:	18ed      	addgt	r5, r5, r3
 800375a:	2600      	movs	r6, #0
 800375c:	341a      	adds	r4, #26
 800375e:	42b5      	cmp	r5, r6
 8003760:	d11a      	bne.n	8003798 <_printf_common+0xc8>
 8003762:	2000      	movs	r0, #0
 8003764:	e008      	b.n	8003778 <_printf_common+0xa8>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4649      	mov	r1, r9
 800376c:	4638      	mov	r0, r7
 800376e:	47c0      	blx	r8
 8003770:	3001      	adds	r0, #1
 8003772:	d103      	bne.n	800377c <_printf_common+0xac>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	3501      	adds	r5, #1
 800377e:	e7c6      	b.n	800370e <_printf_common+0x3e>
 8003780:	18e1      	adds	r1, r4, r3
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	2030      	movs	r0, #48	; 0x30
 8003786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800378a:	4422      	add	r2, r4
 800378c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003794:	3302      	adds	r3, #2
 8003796:	e7c7      	b.n	8003728 <_printf_common+0x58>
 8003798:	2301      	movs	r3, #1
 800379a:	4622      	mov	r2, r4
 800379c:	4649      	mov	r1, r9
 800379e:	4638      	mov	r0, r7
 80037a0:	47c0      	blx	r8
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0e6      	beq.n	8003774 <_printf_common+0xa4>
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7d9      	b.n	800375e <_printf_common+0x8e>
	...

080037ac <_printf_i>:
 80037ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	7e0f      	ldrb	r7, [r1, #24]
 80037b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037b4:	2f78      	cmp	r7, #120	; 0x78
 80037b6:	4691      	mov	r9, r2
 80037b8:	4680      	mov	r8, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	469a      	mov	sl, r3
 80037be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037c2:	d807      	bhi.n	80037d4 <_printf_i+0x28>
 80037c4:	2f62      	cmp	r7, #98	; 0x62
 80037c6:	d80a      	bhi.n	80037de <_printf_i+0x32>
 80037c8:	2f00      	cmp	r7, #0
 80037ca:	f000 80d4 	beq.w	8003976 <_printf_i+0x1ca>
 80037ce:	2f58      	cmp	r7, #88	; 0x58
 80037d0:	f000 80c0 	beq.w	8003954 <_printf_i+0x1a8>
 80037d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037dc:	e03a      	b.n	8003854 <_printf_i+0xa8>
 80037de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037e2:	2b15      	cmp	r3, #21
 80037e4:	d8f6      	bhi.n	80037d4 <_printf_i+0x28>
 80037e6:	a101      	add	r1, pc, #4	; (adr r1, 80037ec <_printf_i+0x40>)
 80037e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037ec:	08003845 	.word	0x08003845
 80037f0:	08003859 	.word	0x08003859
 80037f4:	080037d5 	.word	0x080037d5
 80037f8:	080037d5 	.word	0x080037d5
 80037fc:	080037d5 	.word	0x080037d5
 8003800:	080037d5 	.word	0x080037d5
 8003804:	08003859 	.word	0x08003859
 8003808:	080037d5 	.word	0x080037d5
 800380c:	080037d5 	.word	0x080037d5
 8003810:	080037d5 	.word	0x080037d5
 8003814:	080037d5 	.word	0x080037d5
 8003818:	0800395d 	.word	0x0800395d
 800381c:	08003885 	.word	0x08003885
 8003820:	08003917 	.word	0x08003917
 8003824:	080037d5 	.word	0x080037d5
 8003828:	080037d5 	.word	0x080037d5
 800382c:	0800397f 	.word	0x0800397f
 8003830:	080037d5 	.word	0x080037d5
 8003834:	08003885 	.word	0x08003885
 8003838:	080037d5 	.word	0x080037d5
 800383c:	080037d5 	.word	0x080037d5
 8003840:	0800391f 	.word	0x0800391f
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	602a      	str	r2, [r5, #0]
 800384c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003854:	2301      	movs	r3, #1
 8003856:	e09f      	b.n	8003998 <_printf_i+0x1ec>
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	0607      	lsls	r7, r0, #24
 800385e:	f103 0104 	add.w	r1, r3, #4
 8003862:	6029      	str	r1, [r5, #0]
 8003864:	d501      	bpl.n	800386a <_printf_i+0xbe>
 8003866:	681e      	ldr	r6, [r3, #0]
 8003868:	e003      	b.n	8003872 <_printf_i+0xc6>
 800386a:	0646      	lsls	r6, r0, #25
 800386c:	d5fb      	bpl.n	8003866 <_printf_i+0xba>
 800386e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003872:	2e00      	cmp	r6, #0
 8003874:	da03      	bge.n	800387e <_printf_i+0xd2>
 8003876:	232d      	movs	r3, #45	; 0x2d
 8003878:	4276      	negs	r6, r6
 800387a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800387e:	485a      	ldr	r0, [pc, #360]	; (80039e8 <_printf_i+0x23c>)
 8003880:	230a      	movs	r3, #10
 8003882:	e012      	b.n	80038aa <_printf_i+0xfe>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	1d19      	adds	r1, r3, #4
 800388a:	6029      	str	r1, [r5, #0]
 800388c:	0605      	lsls	r5, r0, #24
 800388e:	d501      	bpl.n	8003894 <_printf_i+0xe8>
 8003890:	681e      	ldr	r6, [r3, #0]
 8003892:	e002      	b.n	800389a <_printf_i+0xee>
 8003894:	0641      	lsls	r1, r0, #25
 8003896:	d5fb      	bpl.n	8003890 <_printf_i+0xe4>
 8003898:	881e      	ldrh	r6, [r3, #0]
 800389a:	4853      	ldr	r0, [pc, #332]	; (80039e8 <_printf_i+0x23c>)
 800389c:	2f6f      	cmp	r7, #111	; 0x6f
 800389e:	bf0c      	ite	eq
 80038a0:	2308      	moveq	r3, #8
 80038a2:	230a      	movne	r3, #10
 80038a4:	2100      	movs	r1, #0
 80038a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038aa:	6865      	ldr	r5, [r4, #4]
 80038ac:	60a5      	str	r5, [r4, #8]
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	bfa2      	ittt	ge
 80038b2:	6821      	ldrge	r1, [r4, #0]
 80038b4:	f021 0104 	bicge.w	r1, r1, #4
 80038b8:	6021      	strge	r1, [r4, #0]
 80038ba:	b90e      	cbnz	r6, 80038c0 <_printf_i+0x114>
 80038bc:	2d00      	cmp	r5, #0
 80038be:	d04b      	beq.n	8003958 <_printf_i+0x1ac>
 80038c0:	4615      	mov	r5, r2
 80038c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80038c6:	fb03 6711 	mls	r7, r3, r1, r6
 80038ca:	5dc7      	ldrb	r7, [r0, r7]
 80038cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038d0:	4637      	mov	r7, r6
 80038d2:	42bb      	cmp	r3, r7
 80038d4:	460e      	mov	r6, r1
 80038d6:	d9f4      	bls.n	80038c2 <_printf_i+0x116>
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d10b      	bne.n	80038f4 <_printf_i+0x148>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07de      	lsls	r6, r3, #31
 80038e0:	d508      	bpl.n	80038f4 <_printf_i+0x148>
 80038e2:	6923      	ldr	r3, [r4, #16]
 80038e4:	6861      	ldr	r1, [r4, #4]
 80038e6:	4299      	cmp	r1, r3
 80038e8:	bfde      	ittt	le
 80038ea:	2330      	movle	r3, #48	; 0x30
 80038ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038f4:	1b52      	subs	r2, r2, r5
 80038f6:	6122      	str	r2, [r4, #16]
 80038f8:	f8cd a000 	str.w	sl, [sp]
 80038fc:	464b      	mov	r3, r9
 80038fe:	aa03      	add	r2, sp, #12
 8003900:	4621      	mov	r1, r4
 8003902:	4640      	mov	r0, r8
 8003904:	f7ff fee4 	bl	80036d0 <_printf_common>
 8003908:	3001      	adds	r0, #1
 800390a:	d14a      	bne.n	80039a2 <_printf_i+0x1f6>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	b004      	add	sp, #16
 8003912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	4833      	ldr	r0, [pc, #204]	; (80039ec <_printf_i+0x240>)
 8003920:	2778      	movs	r7, #120	; 0x78
 8003922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	6829      	ldr	r1, [r5, #0]
 800392a:	061f      	lsls	r7, r3, #24
 800392c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003930:	d402      	bmi.n	8003938 <_printf_i+0x18c>
 8003932:	065f      	lsls	r7, r3, #25
 8003934:	bf48      	it	mi
 8003936:	b2b6      	uxthmi	r6, r6
 8003938:	07df      	lsls	r7, r3, #31
 800393a:	bf48      	it	mi
 800393c:	f043 0320 	orrmi.w	r3, r3, #32
 8003940:	6029      	str	r1, [r5, #0]
 8003942:	bf48      	it	mi
 8003944:	6023      	strmi	r3, [r4, #0]
 8003946:	b91e      	cbnz	r6, 8003950 <_printf_i+0x1a4>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f023 0320 	bic.w	r3, r3, #32
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	2310      	movs	r3, #16
 8003952:	e7a7      	b.n	80038a4 <_printf_i+0xf8>
 8003954:	4824      	ldr	r0, [pc, #144]	; (80039e8 <_printf_i+0x23c>)
 8003956:	e7e4      	b.n	8003922 <_printf_i+0x176>
 8003958:	4615      	mov	r5, r2
 800395a:	e7bd      	b.n	80038d8 <_printf_i+0x12c>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	6826      	ldr	r6, [r4, #0]
 8003960:	6961      	ldr	r1, [r4, #20]
 8003962:	1d18      	adds	r0, r3, #4
 8003964:	6028      	str	r0, [r5, #0]
 8003966:	0635      	lsls	r5, r6, #24
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	d501      	bpl.n	8003970 <_printf_i+0x1c4>
 800396c:	6019      	str	r1, [r3, #0]
 800396e:	e002      	b.n	8003976 <_printf_i+0x1ca>
 8003970:	0670      	lsls	r0, r6, #25
 8003972:	d5fb      	bpl.n	800396c <_printf_i+0x1c0>
 8003974:	8019      	strh	r1, [r3, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	4615      	mov	r5, r2
 800397c:	e7bc      	b.n	80038f8 <_printf_i+0x14c>
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	602a      	str	r2, [r5, #0]
 8003984:	681d      	ldr	r5, [r3, #0]
 8003986:	6862      	ldr	r2, [r4, #4]
 8003988:	2100      	movs	r1, #0
 800398a:	4628      	mov	r0, r5
 800398c:	f7fc fc20 	bl	80001d0 <memchr>
 8003990:	b108      	cbz	r0, 8003996 <_printf_i+0x1ea>
 8003992:	1b40      	subs	r0, r0, r5
 8003994:	6060      	str	r0, [r4, #4]
 8003996:	6863      	ldr	r3, [r4, #4]
 8003998:	6123      	str	r3, [r4, #16]
 800399a:	2300      	movs	r3, #0
 800399c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a0:	e7aa      	b.n	80038f8 <_printf_i+0x14c>
 80039a2:	6923      	ldr	r3, [r4, #16]
 80039a4:	462a      	mov	r2, r5
 80039a6:	4649      	mov	r1, r9
 80039a8:	4640      	mov	r0, r8
 80039aa:	47d0      	blx	sl
 80039ac:	3001      	adds	r0, #1
 80039ae:	d0ad      	beq.n	800390c <_printf_i+0x160>
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	079b      	lsls	r3, r3, #30
 80039b4:	d413      	bmi.n	80039de <_printf_i+0x232>
 80039b6:	68e0      	ldr	r0, [r4, #12]
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	4298      	cmp	r0, r3
 80039bc:	bfb8      	it	lt
 80039be:	4618      	movlt	r0, r3
 80039c0:	e7a6      	b.n	8003910 <_printf_i+0x164>
 80039c2:	2301      	movs	r3, #1
 80039c4:	4632      	mov	r2, r6
 80039c6:	4649      	mov	r1, r9
 80039c8:	4640      	mov	r0, r8
 80039ca:	47d0      	blx	sl
 80039cc:	3001      	adds	r0, #1
 80039ce:	d09d      	beq.n	800390c <_printf_i+0x160>
 80039d0:	3501      	adds	r5, #1
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	9903      	ldr	r1, [sp, #12]
 80039d6:	1a5b      	subs	r3, r3, r1
 80039d8:	42ab      	cmp	r3, r5
 80039da:	dcf2      	bgt.n	80039c2 <_printf_i+0x216>
 80039dc:	e7eb      	b.n	80039b6 <_printf_i+0x20a>
 80039de:	2500      	movs	r5, #0
 80039e0:	f104 0619 	add.w	r6, r4, #25
 80039e4:	e7f5      	b.n	80039d2 <_printf_i+0x226>
 80039e6:	bf00      	nop
 80039e8:	08003d90 	.word	0x08003d90
 80039ec:	08003da1 	.word	0x08003da1

080039f0 <__swbuf_r>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	460e      	mov	r6, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	4605      	mov	r5, r0
 80039f8:	b118      	cbz	r0, 8003a02 <__swbuf_r+0x12>
 80039fa:	6a03      	ldr	r3, [r0, #32]
 80039fc:	b90b      	cbnz	r3, 8003a02 <__swbuf_r+0x12>
 80039fe:	f7ff fa39 	bl	8002e74 <__sinit>
 8003a02:	69a3      	ldr	r3, [r4, #24]
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	071a      	lsls	r2, r3, #28
 8003a0a:	d525      	bpl.n	8003a58 <__swbuf_r+0x68>
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	b31b      	cbz	r3, 8003a58 <__swbuf_r+0x68>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	6922      	ldr	r2, [r4, #16]
 8003a14:	1a98      	subs	r0, r3, r2
 8003a16:	6963      	ldr	r3, [r4, #20]
 8003a18:	b2f6      	uxtb	r6, r6
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	4637      	mov	r7, r6
 8003a1e:	dc04      	bgt.n	8003a2a <__swbuf_r+0x3a>
 8003a20:	4621      	mov	r1, r4
 8003a22:	4628      	mov	r0, r5
 8003a24:	f7ff fcc0 	bl	80033a8 <_fflush_r>
 8003a28:	b9e0      	cbnz	r0, 8003a64 <__swbuf_r+0x74>
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	60a3      	str	r3, [r4, #8]
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	6022      	str	r2, [r4, #0]
 8003a36:	701e      	strb	r6, [r3, #0]
 8003a38:	6962      	ldr	r2, [r4, #20]
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d004      	beq.n	8003a4a <__swbuf_r+0x5a>
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d506      	bpl.n	8003a54 <__swbuf_r+0x64>
 8003a46:	2e0a      	cmp	r6, #10
 8003a48:	d104      	bne.n	8003a54 <__swbuf_r+0x64>
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f7ff fcab 	bl	80033a8 <_fflush_r>
 8003a52:	b938      	cbnz	r0, 8003a64 <__swbuf_r+0x74>
 8003a54:	4638      	mov	r0, r7
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 f806 	bl	8003a6c <__swsetup_r>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d0d5      	beq.n	8003a10 <__swbuf_r+0x20>
 8003a64:	f04f 37ff 	mov.w	r7, #4294967295
 8003a68:	e7f4      	b.n	8003a54 <__swbuf_r+0x64>
	...

08003a6c <__swsetup_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <__swsetup_r+0xac>)
 8003a70:	4605      	mov	r5, r0
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	460c      	mov	r4, r1
 8003a76:	b118      	cbz	r0, 8003a80 <__swsetup_r+0x14>
 8003a78:	6a03      	ldr	r3, [r0, #32]
 8003a7a:	b90b      	cbnz	r3, 8003a80 <__swsetup_r+0x14>
 8003a7c:	f7ff f9fa 	bl	8002e74 <__sinit>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a86:	0718      	lsls	r0, r3, #28
 8003a88:	d422      	bmi.n	8003ad0 <__swsetup_r+0x64>
 8003a8a:	06d9      	lsls	r1, r3, #27
 8003a8c:	d407      	bmi.n	8003a9e <__swsetup_r+0x32>
 8003a8e:	2309      	movs	r3, #9
 8003a90:	602b      	str	r3, [r5, #0]
 8003a92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	e034      	b.n	8003b08 <__swsetup_r+0x9c>
 8003a9e:	0758      	lsls	r0, r3, #29
 8003aa0:	d512      	bpl.n	8003ac8 <__swsetup_r+0x5c>
 8003aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa4:	b141      	cbz	r1, 8003ab8 <__swsetup_r+0x4c>
 8003aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aaa:	4299      	cmp	r1, r3
 8003aac:	d002      	beq.n	8003ab4 <__swsetup_r+0x48>
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f7ff faf4 	bl	800309c <_free_r>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6063      	str	r3, [r4, #4]
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0308 	orr.w	r3, r3, #8
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	b94b      	cbnz	r3, 8003ae8 <__swsetup_r+0x7c>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ade:	d003      	beq.n	8003ae8 <__swsetup_r+0x7c>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f884 	bl	8003bf0 <__smakebuf_r>
 8003ae8:	89a0      	ldrh	r0, [r4, #12]
 8003aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aee:	f010 0301 	ands.w	r3, r0, #1
 8003af2:	d00a      	beq.n	8003b0a <__swsetup_r+0x9e>
 8003af4:	2300      	movs	r3, #0
 8003af6:	60a3      	str	r3, [r4, #8]
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	425b      	negs	r3, r3
 8003afc:	61a3      	str	r3, [r4, #24]
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	b943      	cbnz	r3, 8003b14 <__swsetup_r+0xa8>
 8003b02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b06:	d1c4      	bne.n	8003a92 <__swsetup_r+0x26>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	0781      	lsls	r1, r0, #30
 8003b0c:	bf58      	it	pl
 8003b0e:	6963      	ldrpl	r3, [r4, #20]
 8003b10:	60a3      	str	r3, [r4, #8]
 8003b12:	e7f4      	b.n	8003afe <__swsetup_r+0x92>
 8003b14:	2000      	movs	r0, #0
 8003b16:	e7f7      	b.n	8003b08 <__swsetup_r+0x9c>
 8003b18:	20000068 	.word	0x20000068

08003b1c <_raise_r>:
 8003b1c:	291f      	cmp	r1, #31
 8003b1e:	b538      	push	{r3, r4, r5, lr}
 8003b20:	4604      	mov	r4, r0
 8003b22:	460d      	mov	r5, r1
 8003b24:	d904      	bls.n	8003b30 <_raise_r+0x14>
 8003b26:	2316      	movs	r3, #22
 8003b28:	6003      	str	r3, [r0, #0]
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003b32:	b112      	cbz	r2, 8003b3a <_raise_r+0x1e>
 8003b34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b38:	b94b      	cbnz	r3, 8003b4e <_raise_r+0x32>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 f830 	bl	8003ba0 <_getpid_r>
 8003b40:	462a      	mov	r2, r5
 8003b42:	4601      	mov	r1, r0
 8003b44:	4620      	mov	r0, r4
 8003b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b4a:	f000 b817 	b.w	8003b7c <_kill_r>
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d00a      	beq.n	8003b68 <_raise_r+0x4c>
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	d103      	bne.n	8003b5e <_raise_r+0x42>
 8003b56:	2316      	movs	r3, #22
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	e7e7      	b.n	8003b2e <_raise_r+0x12>
 8003b5e:	2400      	movs	r4, #0
 8003b60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003b64:	4628      	mov	r0, r5
 8003b66:	4798      	blx	r3
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e7e0      	b.n	8003b2e <_raise_r+0x12>

08003b6c <raise>:
 8003b6c:	4b02      	ldr	r3, [pc, #8]	; (8003b78 <raise+0xc>)
 8003b6e:	4601      	mov	r1, r0
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	f7ff bfd3 	b.w	8003b1c <_raise_r>
 8003b76:	bf00      	nop
 8003b78:	20000068 	.word	0x20000068

08003b7c <_kill_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4d07      	ldr	r5, [pc, #28]	; (8003b9c <_kill_r+0x20>)
 8003b80:	2300      	movs	r3, #0
 8003b82:	4604      	mov	r4, r0
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	602b      	str	r3, [r5, #0]
 8003b8a:	f7fd f997 	bl	8000ebc <_kill>
 8003b8e:	1c43      	adds	r3, r0, #1
 8003b90:	d102      	bne.n	8003b98 <_kill_r+0x1c>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	b103      	cbz	r3, 8003b98 <_kill_r+0x1c>
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000026c 	.word	0x2000026c

08003ba0 <_getpid_r>:
 8003ba0:	f7fd b984 	b.w	8000eac <_getpid>

08003ba4 <__swhatbuf_r>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bac:	2900      	cmp	r1, #0
 8003bae:	b096      	sub	sp, #88	; 0x58
 8003bb0:	4615      	mov	r5, r2
 8003bb2:	461e      	mov	r6, r3
 8003bb4:	da0d      	bge.n	8003bd2 <__swhatbuf_r+0x2e>
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	bf0c      	ite	eq
 8003bc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003bc6:	2340      	movne	r3, #64	; 0x40
 8003bc8:	2000      	movs	r0, #0
 8003bca:	6031      	str	r1, [r6, #0]
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	b016      	add	sp, #88	; 0x58
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	466a      	mov	r2, sp
 8003bd4:	f000 f848 	bl	8003c68 <_fstat_r>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	dbec      	blt.n	8003bb6 <__swhatbuf_r+0x12>
 8003bdc:	9901      	ldr	r1, [sp, #4]
 8003bde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003be2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003be6:	4259      	negs	r1, r3
 8003be8:	4159      	adcs	r1, r3
 8003bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bee:	e7eb      	b.n	8003bc8 <__swhatbuf_r+0x24>

08003bf0 <__smakebuf_r>:
 8003bf0:	898b      	ldrh	r3, [r1, #12]
 8003bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bf4:	079d      	lsls	r5, r3, #30
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	d507      	bpl.n	8003c0c <__smakebuf_r+0x1c>
 8003bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	2301      	movs	r3, #1
 8003c06:	6163      	str	r3, [r4, #20]
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	ab01      	add	r3, sp, #4
 8003c0e:	466a      	mov	r2, sp
 8003c10:	f7ff ffc8 	bl	8003ba4 <__swhatbuf_r>
 8003c14:	9900      	ldr	r1, [sp, #0]
 8003c16:	4605      	mov	r5, r0
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff fab3 	bl	8003184 <_malloc_r>
 8003c1e:	b948      	cbnz	r0, 8003c34 <__smakebuf_r+0x44>
 8003c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c24:	059a      	lsls	r2, r3, #22
 8003c26:	d4ef      	bmi.n	8003c08 <__smakebuf_r+0x18>
 8003c28:	f023 0303 	bic.w	r3, r3, #3
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	e7e3      	b.n	8003bfc <__smakebuf_r+0xc>
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	6020      	str	r0, [r4, #0]
 8003c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3c:	81a3      	strh	r3, [r4, #12]
 8003c3e:	9b00      	ldr	r3, [sp, #0]
 8003c40:	6163      	str	r3, [r4, #20]
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	6120      	str	r0, [r4, #16]
 8003c46:	b15b      	cbz	r3, 8003c60 <__smakebuf_r+0x70>
 8003c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 f81d 	bl	8003c8c <_isatty_r>
 8003c52:	b128      	cbz	r0, 8003c60 <__smakebuf_r+0x70>
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	431d      	orrs	r5, r3
 8003c64:	81a5      	strh	r5, [r4, #12]
 8003c66:	e7cf      	b.n	8003c08 <__smakebuf_r+0x18>

08003c68 <_fstat_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d07      	ldr	r5, [pc, #28]	; (8003c88 <_fstat_r+0x20>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	f7fd f980 	bl	8000f7a <_fstat>
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	d102      	bne.n	8003c84 <_fstat_r+0x1c>
 8003c7e:	682b      	ldr	r3, [r5, #0]
 8003c80:	b103      	cbz	r3, 8003c84 <_fstat_r+0x1c>
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	bd38      	pop	{r3, r4, r5, pc}
 8003c86:	bf00      	nop
 8003c88:	2000026c 	.word	0x2000026c

08003c8c <_isatty_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_isatty_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fd f97f 	bl	8000f9a <_isatty>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_isatty_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_isatty_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	2000026c 	.word	0x2000026c

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
